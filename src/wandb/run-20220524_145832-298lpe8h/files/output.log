
Downloading https://github.com/shchur/gnn-benchmark/raw/master/data/npz/amazon_electronics_computers.npz
Processing...
Done!
****************** Adaptive GRAND transformer function ******************
****************** Adaptive GRAND transformer function ******************
GNNEarly
m1.module.weight
torch.Size([128, 767])
m1.module.bias
torch.Size([128])
m2.module.weight
torch.Size([10, 128])
m2.module.bias
torch.Size([10])
odeblock.odefunc.alpha_train
torch.Size([])
odeblock.odefunc.beta_train
torch.Size([])
odeblock.odefunc.alpha_sc
torch.Size([1])
odeblock.odefunc.beta_sc
torch.Size([1])
odeblock.odefunc.k_d
torch.Size([128])
odeblock.odefunc.multihead_att_layer.Q.weight
torch.Size([64, 128])
odeblock.odefunc.multihead_att_layer.Q.bias
torch.Size([64])
odeblock.odefunc.multihead_att_layer.V.weight
torch.Size([64, 128])
odeblock.odefunc.multihead_att_layer.V.bias
torch.Size([64])
odeblock.odefunc.multihead_att_layer.K.weight
torch.Size([64, 128])
odeblock.odefunc.multihead_att_layer.K.bias
torch.Size([64])
odeblock.odefunc.multihead_att_layer.Wout.weight
torch.Size([128, 16])
odeblock.odefunc.multihead_att_layer.Wout.bias
torch.Size([128])
odeblock.reg_odefunc.odefunc.alpha_train
torch.Size([])
odeblock.reg_odefunc.odefunc.beta_train
torch.Size([])
odeblock.reg_odefunc.odefunc.alpha_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.beta_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.k_d
torch.Size([128])
odeblock.reg_odefunc.odefunc.multihead_att_layer.Q.weight
torch.Size([64, 128])
odeblock.reg_odefunc.odefunc.multihead_att_layer.Q.bias
torch.Size([64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.V.weight
torch.Size([64, 128])
odeblock.reg_odefunc.odefunc.multihead_att_layer.V.bias
torch.Size([64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.K.weight
torch.Size([64, 128])
odeblock.reg_odefunc.odefunc.multihead_att_layer.K.bias
torch.Size([64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.Wout.weight
torch.Size([128, 16])
odeblock.reg_odefunc.odefunc.multihead_att_layer.Wout.bias
torch.Size([128])
/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py:11: UserWarning: Dopri5Solver: Unexpected arguments {'step_size': 1, 'max_iters': 100}
  warnings.warn('{}: Unexpected arguments {}'.format(solver.__class__.__name__, unused_kwargs))
K_d =  Parameter containing:
tensor([0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965,
        0.9965, 0.9965], device='cuda:0', requires_grad=True)
Epoch: 001/100, Runtime 6.817000, Loss 2.325201, forward nfe 20, backward nfe 20, Train: 0.1500, Val: 0.0846, Test: 0.0833, Best time: 0.0569
/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py:11: UserWarning: EarlyStopDopri5: Unexpected arguments {'step_size': 1, 'max_iters': 100}
  warnings.warn('{}: Unexpected arguments {}'.format(solver.__class__.__name__, unused_kwargs))
K_d =  Parameter containing:
tensor([0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9930, 0.9929, 0.9930,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9930, 0.9929,
        0.9930, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9930, 0.9929,
        0.9930, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9930,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9930, 0.9929, 0.9929, 0.9929,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9930, 0.9929, 0.9929,
        0.9930, 0.9929, 0.9930, 0.9930, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929,
        0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929, 0.9929,
        0.9929, 0.9929], device='cuda:0', requires_grad=True)
Epoch: 002/100, Runtime 3.945970, Loss 2.233389, forward nfe 72, backward nfe 40, Train: 0.4050, Val: 0.2338, Test: 0.2410, Best time: 0.0541
K_d =  Parameter containing:
tensor([0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9895, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9895, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9895,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9895, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9895, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9895, 0.9894, 0.9894, 0.9895, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894, 0.9894,
        0.9894, 0.9894], device='cuda:0', requires_grad=True)
Epoch: 003/100, Runtime 3.824939, Loss 2.130889, forward nfe 130, backward nfe 60, Train: 0.6000, Val: 0.2892, Test: 0.2922, Best time: 0.0522
K_d =  Parameter containing:
tensor([0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9858, 0.9859, 0.9859, 0.9858, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9860, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9858, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9858, 0.9859, 0.9859, 0.9859, 0.9858,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9858, 0.9859, 0.9859, 0.9860, 0.9859, 0.9858, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859,
        0.9860, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859, 0.9859,
        0.9859, 0.9859], device='cuda:0', requires_grad=True)
Epoch: 004/100, Runtime 3.889340, Loss 1.991123, forward nfe 188, backward nfe 80, Train: 0.7900, Val: 0.4046, Test: 0.4188, Best time: 0.0506
K_d =  Parameter containing:
tensor([0.9823, 0.9823, 0.9823, 0.9823, 0.9823, 0.9823, 0.9823, 0.9823, 0.9823,
        0.9823, 0.9824, 0.9823, 0.9824, 0.9823, 0.9823, 0.9824, 0.9823, 0.9824,
        0.9823, 0.9823, 0.9823, 0.9824, 0.9824, 0.9825, 0.9823, 0.9823, 0.9823,
        0.9824, 0.9824, 0.9824, 0.9823, 0.9824, 0.9823, 0.9823, 0.9824, 0.9823,
        0.9824, 0.9823, 0.9824, 0.9823, 0.9823, 0.9823, 0.9823, 0.9824, 0.9823,
        0.9824, 0.9823, 0.9824, 0.9824, 0.9823, 0.9823, 0.9823, 0.9824, 0.9824,
        0.9823, 0.9824, 0.9823, 0.9824, 0.9823, 0.9824, 0.9824, 0.9823, 0.9824,
        0.9823, 0.9823, 0.9823, 0.9823, 0.9823, 0.9824, 0.9823, 0.9823, 0.9823,
        0.9823, 0.9823, 0.9824, 0.9823, 0.9823, 0.9824, 0.9823, 0.9823, 0.9823,
        0.9824, 0.9823, 0.9823, 0.9824, 0.9825, 0.9824, 0.9823, 0.9823, 0.9823,
        0.9823, 0.9823, 0.9823, 0.9823, 0.9824, 0.9823, 0.9823, 0.9823, 0.9823,
        0.9826, 0.9823, 0.9824, 0.9824, 0.9823, 0.9823, 0.9823, 0.9824, 0.9823,
        0.9823, 0.9824, 0.9824, 0.9823, 0.9824, 0.9823, 0.9823, 0.9824, 0.9823,
        0.9823, 0.9824, 0.9824, 0.9823, 0.9823, 0.9824, 0.9823, 0.9824, 0.9823,
        0.9824, 0.9823], device='cuda:0', requires_grad=True)
Epoch: 005/100, Runtime 4.966906, Loss 1.847353, forward nfe 252, backward nfe 106, Train: 0.8500, Val: 0.6223, Test: 0.6223, Best time: 1.3530
K_d =  Parameter containing:
tensor([0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788,
        0.9788, 0.9788, 0.9788, 0.9789, 0.9788, 0.9787, 0.9789, 0.9788, 0.9788,
        0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9789, 0.9787, 0.9788, 0.9788,
        0.9789, 0.9789, 0.9789, 0.9788, 0.9788, 0.9787, 0.9787, 0.9788, 0.9788,
        0.9789, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9787, 0.9789, 0.9788,
        0.9788, 0.9788, 0.9789, 0.9788, 0.9788, 0.9787, 0.9788, 0.9788, 0.9789,
        0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788,
        0.9788, 0.9788, 0.9788, 0.9788, 0.9787, 0.9789, 0.9788, 0.9788, 0.9787,
        0.9787, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788,
        0.9788, 0.9788, 0.9788, 0.9789, 0.9789, 0.9788, 0.9787, 0.9788, 0.9788,
        0.9788, 0.9788, 0.9788, 0.9788, 0.9789, 0.9788, 0.9788, 0.9788, 0.9788,
        0.9790, 0.9788, 0.9789, 0.9789, 0.9788, 0.9788, 0.9788, 0.9789, 0.9788,
        0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788, 0.9788,
        0.9788, 0.9788, 0.9789, 0.9788, 0.9788, 0.9789, 0.9788, 0.9788, 0.9788,
        0.9789, 0.9788], device='cuda:0', requires_grad=True)
Epoch: 006/100, Runtime 4.590202, Loss 1.690009, forward nfe 322, backward nfe 132, Train: 0.8750, Val: 0.7031, Test: 0.7169, Best time: 1.4388
K_d =  Parameter containing:
tensor([0.9752, 0.9753, 0.9753, 0.9752, 0.9753, 0.9752, 0.9752, 0.9752, 0.9752,
        0.9752, 0.9753, 0.9753, 0.9754, 0.9753, 0.9752, 0.9753, 0.9753, 0.9753,
        0.9753, 0.9753, 0.9752, 0.9753, 0.9753, 0.9754, 0.9752, 0.9753, 0.9752,
        0.9754, 0.9754, 0.9754, 0.9752, 0.9753, 0.9752, 0.9752, 0.9753, 0.9753,
        0.9754, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9752, 0.9753, 0.9753,
        0.9753, 0.9752, 0.9755, 0.9753, 0.9753, 0.9751, 0.9753, 0.9753, 0.9754,
        0.9753, 0.9753, 0.9752, 0.9753, 0.9753, 0.9753, 0.9753, 0.9752, 0.9753,
        0.9753, 0.9752, 0.9753, 0.9753, 0.9752, 0.9753, 0.9753, 0.9753, 0.9752,
        0.9752, 0.9752, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9752, 0.9752,
        0.9753, 0.9752, 0.9753, 0.9754, 0.9754, 0.9753, 0.9752, 0.9753, 0.9752,
        0.9753, 0.9753, 0.9753, 0.9752, 0.9754, 0.9752, 0.9753, 0.9754, 0.9752,
        0.9756, 0.9753, 0.9753, 0.9754, 0.9752, 0.9752, 0.9753, 0.9754, 0.9752,
        0.9753, 0.9753, 0.9753, 0.9752, 0.9752, 0.9753, 0.9752, 0.9753, 0.9752,
        0.9753, 0.9753, 0.9754, 0.9753, 0.9753, 0.9754, 0.9753, 0.9753, 0.9753,
        0.9753, 0.9752], device='cuda:0', requires_grad=True)
Epoch: 007/100, Runtime 4.678984, Loss 1.536535, forward nfe 392, backward nfe 158, Train: 0.9500, Val: 0.7177, Test: 0.7228, Best time: 1.6930
K_d =  Parameter containing:
tensor([0.9717, 0.9718, 0.9718, 0.9716, 0.9718, 0.9717, 0.9716, 0.9717, 0.9717,
        0.9717, 0.9718, 0.9717, 0.9719, 0.9717, 0.9716, 0.9718, 0.9717, 0.9718,
        0.9717, 0.9717, 0.9716, 0.9718, 0.9718, 0.9719, 0.9717, 0.9717, 0.9717,
        0.9719, 0.9719, 0.9720, 0.9717, 0.9717, 0.9716, 0.9717, 0.9718, 0.9717,
        0.9719, 0.9718, 0.9718, 0.9717, 0.9718, 0.9717, 0.9716, 0.9718, 0.9718,
        0.9718, 0.9717, 0.9720, 0.9717, 0.9718, 0.9715, 0.9718, 0.9717, 0.9719,
        0.9718, 0.9717, 0.9717, 0.9718, 0.9717, 0.9718, 0.9718, 0.9717, 0.9718,
        0.9717, 0.9716, 0.9718, 0.9717, 0.9716, 0.9718, 0.9717, 0.9717, 0.9716,
        0.9716, 0.9716, 0.9718, 0.9717, 0.9718, 0.9718, 0.9717, 0.9717, 0.9716,
        0.9718, 0.9717, 0.9718, 0.9719, 0.9719, 0.9718, 0.9716, 0.9718, 0.9717,
        0.9717, 0.9717, 0.9718, 0.9717, 0.9718, 0.9717, 0.9717, 0.9719, 0.9717,
        0.9721, 0.9718, 0.9718, 0.9719, 0.9717, 0.9717, 0.9717, 0.9719, 0.9717,
        0.9718, 0.9717, 0.9718, 0.9716, 0.9717, 0.9717, 0.9717, 0.9717, 0.9717,
        0.9717, 0.9717, 0.9719, 0.9718, 0.9717, 0.9719, 0.9717, 0.9718, 0.9718,
        0.9718, 0.9717], device='cuda:0', requires_grad=True)
Epoch: 008/100, Runtime 4.060299, Loss 1.413776, forward nfe 456, backward nfe 178, Train: 0.9500, Val: 0.7177, Test: 0.7228, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9681, 0.9682, 0.9682, 0.9681, 0.9682, 0.9681, 0.9680, 0.9681, 0.9682,
        0.9682, 0.9683, 0.9683, 0.9685, 0.9682, 0.9681, 0.9683, 0.9682, 0.9682,
        0.9681, 0.9682, 0.9681, 0.9683, 0.9682, 0.9684, 0.9681, 0.9682, 0.9682,
        0.9684, 0.9684, 0.9685, 0.9682, 0.9682, 0.9680, 0.9681, 0.9682, 0.9682,
        0.9684, 0.9682, 0.9682, 0.9682, 0.9682, 0.9682, 0.9680, 0.9683, 0.9683,
        0.9683, 0.9682, 0.9685, 0.9681, 0.9682, 0.9679, 0.9682, 0.9682, 0.9684,
        0.9682, 0.9681, 0.9680, 0.9683, 0.9682, 0.9682, 0.9683, 0.9682, 0.9684,
        0.9682, 0.9680, 0.9683, 0.9682, 0.9681, 0.9682, 0.9682, 0.9682, 0.9680,
        0.9680, 0.9680, 0.9683, 0.9682, 0.9683, 0.9683, 0.9682, 0.9682, 0.9680,
        0.9683, 0.9682, 0.9683, 0.9683, 0.9683, 0.9683, 0.9680, 0.9682, 0.9682,
        0.9682, 0.9682, 0.9683, 0.9682, 0.9683, 0.9681, 0.9682, 0.9684, 0.9681,
        0.9686, 0.9683, 0.9683, 0.9684, 0.9680, 0.9681, 0.9683, 0.9684, 0.9681,
        0.9682, 0.9681, 0.9682, 0.9680, 0.9681, 0.9682, 0.9681, 0.9681, 0.9681,
        0.9682, 0.9682, 0.9684, 0.9683, 0.9682, 0.9684, 0.9682, 0.9683, 0.9682,
        0.9682, 0.9681], device='cuda:0', requires_grad=True)
Epoch: 009/100, Runtime 4.227724, Loss 1.303510, forward nfe 520, backward nfe 198, Train: 0.9500, Val: 0.7177, Test: 0.7228, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9646, 0.9647, 0.9647, 0.9645, 0.9647, 0.9646, 0.9644, 0.9645, 0.9647,
        0.9647, 0.9647, 0.9649, 0.9650, 0.9647, 0.9645, 0.9648, 0.9647, 0.9647,
        0.9646, 0.9647, 0.9645, 0.9648, 0.9647, 0.9649, 0.9646, 0.9647, 0.9646,
        0.9648, 0.9649, 0.9650, 0.9646, 0.9646, 0.9644, 0.9645, 0.9647, 0.9646,
        0.9649, 0.9647, 0.9647, 0.9647, 0.9647, 0.9646, 0.9644, 0.9648, 0.9648,
        0.9648, 0.9646, 0.9650, 0.9645, 0.9647, 0.9644, 0.9647, 0.9646, 0.9649,
        0.9647, 0.9646, 0.9644, 0.9647, 0.9646, 0.9647, 0.9647, 0.9646, 0.9649,
        0.9647, 0.9644, 0.9648, 0.9647, 0.9645, 0.9647, 0.9646, 0.9647, 0.9644,
        0.9645, 0.9644, 0.9648, 0.9647, 0.9649, 0.9647, 0.9646, 0.9647, 0.9644,
        0.9648, 0.9647, 0.9647, 0.9647, 0.9648, 0.9648, 0.9645, 0.9647, 0.9646,
        0.9647, 0.9646, 0.9647, 0.9646, 0.9648, 0.9645, 0.9647, 0.9649, 0.9646,
        0.9651, 0.9647, 0.9648, 0.9650, 0.9644, 0.9646, 0.9648, 0.9649, 0.9646,
        0.9647, 0.9646, 0.9647, 0.9645, 0.9645, 0.9646, 0.9645, 0.9645, 0.9645,
        0.9647, 0.9647, 0.9649, 0.9647, 0.9647, 0.9649, 0.9646, 0.9648, 0.9647,
        0.9646, 0.9646], device='cuda:0', requires_grad=True)
Epoch: 010/100, Runtime 4.679584, Loss 1.182734, forward nfe 590, backward nfe 224, Train: 0.9150, Val: 0.7792, Test: 0.7840, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9611, 0.9612, 0.9612, 0.9610, 0.9611, 0.9610, 0.9608, 0.9610, 0.9611,
        0.9611, 0.9612, 0.9615, 0.9616, 0.9611, 0.9610, 0.9613, 0.9611, 0.9612,
        0.9611, 0.9611, 0.9610, 0.9614, 0.9612, 0.9614, 0.9610, 0.9612, 0.9611,
        0.9614, 0.9614, 0.9616, 0.9611, 0.9611, 0.9607, 0.9610, 0.9612, 0.9610,
        0.9614, 0.9612, 0.9611, 0.9612, 0.9612, 0.9610, 0.9608, 0.9612, 0.9613,
        0.9613, 0.9610, 0.9615, 0.9610, 0.9612, 0.9608, 0.9612, 0.9610, 0.9614,
        0.9612, 0.9610, 0.9609, 0.9612, 0.9611, 0.9612, 0.9612, 0.9611, 0.9615,
        0.9611, 0.9608, 0.9613, 0.9611, 0.9610, 0.9611, 0.9610, 0.9611, 0.9608,
        0.9609, 0.9608, 0.9612, 0.9612, 0.9614, 0.9612, 0.9610, 0.9611, 0.9608,
        0.9613, 0.9612, 0.9612, 0.9611, 0.9613, 0.9612, 0.9609, 0.9612, 0.9611,
        0.9612, 0.9611, 0.9612, 0.9611, 0.9612, 0.9609, 0.9612, 0.9614, 0.9610,
        0.9615, 0.9612, 0.9613, 0.9615, 0.9608, 0.9610, 0.9613, 0.9615, 0.9610,
        0.9612, 0.9610, 0.9611, 0.9609, 0.9610, 0.9611, 0.9609, 0.9610, 0.9609,
        0.9611, 0.9611, 0.9614, 0.9612, 0.9612, 0.9614, 0.9611, 0.9612, 0.9611,
        0.9611, 0.9610], device='cuda:0', requires_grad=True)
Epoch: 011/100, Runtime 4.402306, Loss 1.059600, forward nfe 654, backward nfe 244, Train: 0.8600, Val: 0.8254, Test: 0.8206, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9575, 0.9577, 0.9577, 0.9574, 0.9575, 0.9575, 0.9572, 0.9574, 0.9576,
        0.9576, 0.9577, 0.9581, 0.9582, 0.9576, 0.9574, 0.9577, 0.9576, 0.9577,
        0.9575, 0.9576, 0.9574, 0.9579, 0.9577, 0.9578, 0.9575, 0.9577, 0.9575,
        0.9579, 0.9579, 0.9580, 0.9576, 0.9576, 0.9572, 0.9574, 0.9577, 0.9574,
        0.9579, 0.9577, 0.9575, 0.9577, 0.9576, 0.9575, 0.9572, 0.9577, 0.9579,
        0.9578, 0.9575, 0.9580, 0.9574, 0.9577, 0.9573, 0.9577, 0.9574, 0.9579,
        0.9577, 0.9573, 0.9573, 0.9577, 0.9575, 0.9577, 0.9577, 0.9576, 0.9581,
        0.9576, 0.9572, 0.9577, 0.9576, 0.9574, 0.9576, 0.9575, 0.9576, 0.9572,
        0.9573, 0.9572, 0.9577, 0.9576, 0.9580, 0.9577, 0.9575, 0.9576, 0.9571,
        0.9579, 0.9577, 0.9578, 0.9575, 0.9578, 0.9577, 0.9573, 0.9577, 0.9576,
        0.9578, 0.9575, 0.9577, 0.9576, 0.9576, 0.9574, 0.9577, 0.9580, 0.9575,
        0.9580, 0.9577, 0.9579, 0.9581, 0.9572, 0.9575, 0.9579, 0.9581, 0.9575,
        0.9577, 0.9574, 0.9576, 0.9573, 0.9574, 0.9576, 0.9574, 0.9574, 0.9574,
        0.9575, 0.9576, 0.9579, 0.9577, 0.9577, 0.9579, 0.9575, 0.9577, 0.9575,
        0.9575, 0.9575], device='cuda:0', requires_grad=True)
Epoch: 012/100, Runtime 4.707464, Loss 0.964437, forward nfe 724, backward nfe 270, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9540, 0.9541, 0.9542, 0.9539, 0.9540, 0.9540, 0.9537, 0.9538, 0.9541,
        0.9541, 0.9542, 0.9548, 0.9548, 0.9541, 0.9538, 0.9542, 0.9541, 0.9542,
        0.9540, 0.9541, 0.9539, 0.9544, 0.9542, 0.9543, 0.9539, 0.9542, 0.9540,
        0.9544, 0.9544, 0.9545, 0.9541, 0.9542, 0.9536, 0.9538, 0.9541, 0.9539,
        0.9544, 0.9542, 0.9540, 0.9543, 0.9541, 0.9540, 0.9536, 0.9541, 0.9544,
        0.9543, 0.9540, 0.9546, 0.9538, 0.9542, 0.9538, 0.9542, 0.9538, 0.9544,
        0.9542, 0.9537, 0.9537, 0.9542, 0.9539, 0.9541, 0.9542, 0.9540, 0.9547,
        0.9541, 0.9536, 0.9542, 0.9541, 0.9539, 0.9541, 0.9540, 0.9541, 0.9537,
        0.9538, 0.9538, 0.9542, 0.9541, 0.9546, 0.9541, 0.9539, 0.9541, 0.9535,
        0.9544, 0.9542, 0.9542, 0.9540, 0.9543, 0.9542, 0.9538, 0.9541, 0.9541,
        0.9543, 0.9539, 0.9542, 0.9540, 0.9541, 0.9539, 0.9542, 0.9545, 0.9540,
        0.9545, 0.9542, 0.9544, 0.9548, 0.9536, 0.9540, 0.9544, 0.9549, 0.9540,
        0.9542, 0.9539, 0.9541, 0.9537, 0.9538, 0.9541, 0.9538, 0.9539, 0.9538,
        0.9540, 0.9540, 0.9544, 0.9542, 0.9542, 0.9544, 0.9540, 0.9542, 0.9539,
        0.9540, 0.9539], device='cuda:0', requires_grad=True)
Epoch: 013/100, Runtime 4.914326, Loss 0.873914, forward nfe 794, backward nfe 296, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9504, 0.9506, 0.9506, 0.9503, 0.9504, 0.9505, 0.9501, 0.9503, 0.9506,
        0.9505, 0.9507, 0.9515, 0.9514, 0.9506, 0.9503, 0.9506, 0.9505, 0.9507,
        0.9504, 0.9506, 0.9504, 0.9510, 0.9507, 0.9508, 0.9504, 0.9507, 0.9504,
        0.9509, 0.9509, 0.9510, 0.9506, 0.9507, 0.9501, 0.9503, 0.9506, 0.9504,
        0.9509, 0.9506, 0.9504, 0.9509, 0.9506, 0.9505, 0.9500, 0.9506, 0.9509,
        0.9508, 0.9504, 0.9511, 0.9503, 0.9507, 0.9503, 0.9506, 0.9503, 0.9509,
        0.9507, 0.9501, 0.9502, 0.9507, 0.9504, 0.9506, 0.9507, 0.9505, 0.9514,
        0.9506, 0.9501, 0.9507, 0.9507, 0.9504, 0.9506, 0.9505, 0.9506, 0.9501,
        0.9503, 0.9504, 0.9507, 0.9506, 0.9511, 0.9506, 0.9503, 0.9506, 0.9499,
        0.9509, 0.9508, 0.9507, 0.9504, 0.9507, 0.9507, 0.9502, 0.9506, 0.9506,
        0.9509, 0.9503, 0.9507, 0.9505, 0.9505, 0.9504, 0.9507, 0.9511, 0.9504,
        0.9509, 0.9507, 0.9510, 0.9514, 0.9501, 0.9504, 0.9510, 0.9516, 0.9505,
        0.9506, 0.9504, 0.9506, 0.9501, 0.9503, 0.9507, 0.9502, 0.9504, 0.9502,
        0.9504, 0.9504, 0.9509, 0.9507, 0.9507, 0.9509, 0.9504, 0.9507, 0.9504,
        0.9504, 0.9503], device='cuda:0', requires_grad=True)
Epoch: 014/100, Runtime 4.689771, Loss 0.774104, forward nfe 864, backward nfe 322, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9469, 0.9471, 0.9471, 0.9468, 0.9469, 0.9470, 0.9466, 0.9468, 0.9470,
        0.9470, 0.9472, 0.9483, 0.9481, 0.9471, 0.9467, 0.9471, 0.9470, 0.9471,
        0.9469, 0.9471, 0.9471, 0.9475, 0.9473, 0.9473, 0.9469, 0.9472, 0.9468,
        0.9474, 0.9473, 0.9475, 0.9470, 0.9473, 0.9465, 0.9468, 0.9471, 0.9470,
        0.9474, 0.9471, 0.9468, 0.9476, 0.9470, 0.9469, 0.9465, 0.9470, 0.9474,
        0.9473, 0.9469, 0.9477, 0.9468, 0.9472, 0.9469, 0.9471, 0.9467, 0.9474,
        0.9472, 0.9465, 0.9467, 0.9472, 0.9468, 0.9471, 0.9472, 0.9470, 0.9480,
        0.9471, 0.9465, 0.9472, 0.9473, 0.9469, 0.9471, 0.9470, 0.9471, 0.9466,
        0.9468, 0.9469, 0.9472, 0.9471, 0.9477, 0.9471, 0.9467, 0.9470, 0.9463,
        0.9475, 0.9474, 0.9472, 0.9468, 0.9472, 0.9473, 0.9467, 0.9471, 0.9470,
        0.9474, 0.9467, 0.9472, 0.9470, 0.9469, 0.9469, 0.9472, 0.9478, 0.9469,
        0.9474, 0.9473, 0.9477, 0.9482, 0.9465, 0.9469, 0.9476, 0.9484, 0.9470,
        0.9471, 0.9469, 0.9471, 0.9466, 0.9467, 0.9473, 0.9466, 0.9469, 0.9466,
        0.9468, 0.9469, 0.9474, 0.9472, 0.9472, 0.9474, 0.9469, 0.9472, 0.9469,
        0.9469, 0.9468], device='cuda:0', requires_grad=True)
Epoch: 015/100, Runtime 4.483793, Loss 0.696965, forward nfe 934, backward nfe 342, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9434, 0.9436, 0.9436, 0.9433, 0.9434, 0.9436, 0.9431, 0.9434, 0.9435,
        0.9434, 0.9437, 0.9453, 0.9448, 0.9436, 0.9432, 0.9435, 0.9435, 0.9436,
        0.9434, 0.9436, 0.9437, 0.9441, 0.9438, 0.9438, 0.9434, 0.9436, 0.9433,
        0.9440, 0.9437, 0.9440, 0.9435, 0.9439, 0.9430, 0.9433, 0.9436, 0.9436,
        0.9440, 0.9436, 0.9433, 0.9443, 0.9435, 0.9435, 0.9429, 0.9434, 0.9440,
        0.9437, 0.9434, 0.9443, 0.9433, 0.9437, 0.9435, 0.9436, 0.9431, 0.9440,
        0.9438, 0.9429, 0.9432, 0.9437, 0.9432, 0.9436, 0.9437, 0.9435, 0.9447,
        0.9435, 0.9430, 0.9437, 0.9440, 0.9435, 0.9435, 0.9435, 0.9436, 0.9431,
        0.9433, 0.9435, 0.9436, 0.9436, 0.9443, 0.9436, 0.9431, 0.9435, 0.9427,
        0.9441, 0.9440, 0.9437, 0.9432, 0.9437, 0.9438, 0.9433, 0.9436, 0.9435,
        0.9440, 0.9431, 0.9437, 0.9435, 0.9433, 0.9434, 0.9437, 0.9444, 0.9434,
        0.9439, 0.9439, 0.9445, 0.9450, 0.9430, 0.9434, 0.9442, 0.9452, 0.9436,
        0.9436, 0.9434, 0.9437, 0.9430, 0.9432, 0.9440, 0.9430, 0.9434, 0.9431,
        0.9432, 0.9434, 0.9439, 0.9437, 0.9437, 0.9440, 0.9433, 0.9437, 0.9435,
        0.9433, 0.9432], device='cuda:0', requires_grad=True)
Epoch: 016/100, Runtime 4.852927, Loss 0.633770, forward nfe 1010, backward nfe 368, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9398, 0.9401, 0.9401, 0.9398, 0.9399, 0.9401, 0.9397, 0.9399, 0.9400,
        0.9399, 0.9402, 0.9422, 0.9417, 0.9401, 0.9396, 0.9399, 0.9400, 0.9401,
        0.9398, 0.9400, 0.9404, 0.9407, 0.9404, 0.9403, 0.9399, 0.9401, 0.9398,
        0.9406, 0.9401, 0.9405, 0.9400, 0.9405, 0.9395, 0.9399, 0.9401, 0.9402,
        0.9405, 0.9401, 0.9397, 0.9412, 0.9400, 0.9400, 0.9394, 0.9398, 0.9405,
        0.9402, 0.9400, 0.9409, 0.9398, 0.9402, 0.9402, 0.9401, 0.9396, 0.9405,
        0.9403, 0.9393, 0.9397, 0.9402, 0.9396, 0.9401, 0.9402, 0.9400, 0.9413,
        0.9400, 0.9395, 0.9402, 0.9407, 0.9401, 0.9400, 0.9401, 0.9401, 0.9397,
        0.9398, 0.9402, 0.9401, 0.9401, 0.9409, 0.9401, 0.9395, 0.9400, 0.9391,
        0.9407, 0.9406, 0.9402, 0.9396, 0.9402, 0.9404, 0.9398, 0.9401, 0.9400,
        0.9406, 0.9396, 0.9402, 0.9400, 0.9397, 0.9400, 0.9402, 0.9411, 0.9398,
        0.9403, 0.9405, 0.9413, 0.9419, 0.9394, 0.9399, 0.9409, 0.9420, 0.9402,
        0.9401, 0.9400, 0.9402, 0.9394, 0.9397, 0.9406, 0.9394, 0.9399, 0.9395,
        0.9397, 0.9399, 0.9404, 0.9402, 0.9402, 0.9405, 0.9397, 0.9402, 0.9400,
        0.9398, 0.9397], device='cuda:0', requires_grad=True)
Epoch: 017/100, Runtime 4.991352, Loss 0.566891, forward nfe 1086, backward nfe 394, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9363, 0.9366, 0.9366, 0.9363, 0.9364, 0.9367, 0.9362, 0.9365, 0.9365,
        0.9364, 0.9367, 0.9393, 0.9386, 0.9366, 0.9360, 0.9363, 0.9365, 0.9366,
        0.9363, 0.9365, 0.9371, 0.9374, 0.9369, 0.9369, 0.9365, 0.9366, 0.9362,
        0.9372, 0.9365, 0.9370, 0.9365, 0.9372, 0.9360, 0.9364, 0.9366, 0.9368,
        0.9370, 0.9366, 0.9362, 0.9380, 0.9365, 0.9365, 0.9358, 0.9363, 0.9370,
        0.9367, 0.9366, 0.9375, 0.9364, 0.9367, 0.9371, 0.9366, 0.9361, 0.9371,
        0.9369, 0.9357, 0.9363, 0.9367, 0.9360, 0.9366, 0.9367, 0.9365, 0.9379,
        0.9365, 0.9359, 0.9367, 0.9376, 0.9368, 0.9365, 0.9367, 0.9366, 0.9362,
        0.9364, 0.9370, 0.9366, 0.9366, 0.9376, 0.9365, 0.9360, 0.9365, 0.9355,
        0.9373, 0.9373, 0.9367, 0.9360, 0.9367, 0.9369, 0.9365, 0.9366, 0.9365,
        0.9373, 0.9360, 0.9367, 0.9365, 0.9361, 0.9367, 0.9368, 0.9378, 0.9362,
        0.9368, 0.9371, 0.9383, 0.9388, 0.9359, 0.9364, 0.9375, 0.9389, 0.9368,
        0.9366, 0.9367, 0.9367, 0.9359, 0.9362, 0.9373, 0.9357, 0.9364, 0.9360,
        0.9362, 0.9365, 0.9369, 0.9367, 0.9366, 0.9371, 0.9362, 0.9367, 0.9365,
        0.9362, 0.9362], device='cuda:0', requires_grad=True)
Epoch: 018/100, Runtime 4.927243, Loss 0.596022, forward nfe 1162, backward nfe 420, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9328, 0.9331, 0.9331, 0.9328, 0.9329, 0.9333, 0.9328, 0.9332, 0.9330,
        0.9329, 0.9332, 0.9364, 0.9358, 0.9331, 0.9324, 0.9328, 0.9329, 0.9331,
        0.9329, 0.9330, 0.9339, 0.9340, 0.9335, 0.9334, 0.9331, 0.9330, 0.9327,
        0.9338, 0.9329, 0.9335, 0.9330, 0.9338, 0.9326, 0.9331, 0.9331, 0.9335,
        0.9335, 0.9332, 0.9327, 0.9350, 0.9330, 0.9331, 0.9323, 0.9327, 0.9335,
        0.9332, 0.9332, 0.9341, 0.9330, 0.9332, 0.9341, 0.9331, 0.9325, 0.9338,
        0.9336, 0.9322, 0.9329, 0.9332, 0.9324, 0.9331, 0.9332, 0.9330, 0.9346,
        0.9330, 0.9324, 0.9332, 0.9346, 0.9335, 0.9330, 0.9333, 0.9331, 0.9329,
        0.9330, 0.9338, 0.9331, 0.9331, 0.9342, 0.9331, 0.9325, 0.9330, 0.9320,
        0.9340, 0.9340, 0.9331, 0.9325, 0.9331, 0.9335, 0.9331, 0.9331, 0.9330,
        0.9340, 0.9325, 0.9332, 0.9330, 0.9324, 0.9333, 0.9334, 0.9346, 0.9327,
        0.9332, 0.9338, 0.9353, 0.9358, 0.9325, 0.9328, 0.9341, 0.9359, 0.9335,
        0.9331, 0.9334, 0.9334, 0.9325, 0.9328, 0.9339, 0.9321, 0.9330, 0.9325,
        0.9327, 0.9330, 0.9335, 0.9332, 0.9331, 0.9337, 0.9327, 0.9332, 0.9330,
        0.9327, 0.9326], device='cuda:0', requires_grad=True)
Epoch: 019/100, Runtime 5.102845, Loss 0.487911, forward nfe 1238, backward nfe 446, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9293, 0.9296, 0.9296, 0.9294, 0.9295, 0.9299, 0.9294, 0.9299, 0.9295,
        0.9294, 0.9297, 0.9336, 0.9329, 0.9296, 0.9289, 0.9293, 0.9294, 0.9296,
        0.9294, 0.9296, 0.9307, 0.9306, 0.9301, 0.9300, 0.9296, 0.9295, 0.9292,
        0.9304, 0.9294, 0.9300, 0.9295, 0.9306, 0.9293, 0.9298, 0.9296, 0.9302,
        0.9301, 0.9297, 0.9292, 0.9320, 0.9295, 0.9296, 0.9288, 0.9291, 0.9300,
        0.9296, 0.9299, 0.9307, 0.9296, 0.9298, 0.9312, 0.9296, 0.9290, 0.9306,
        0.9303, 0.9286, 0.9295, 0.9297, 0.9289, 0.9296, 0.9297, 0.9295, 0.9312,
        0.9295, 0.9288, 0.9297, 0.9316, 0.9301, 0.9296, 0.9299, 0.9296, 0.9295,
        0.9297, 0.9305, 0.9296, 0.9296, 0.9308, 0.9296, 0.9290, 0.9295, 0.9284,
        0.9306, 0.9307, 0.9296, 0.9290, 0.9296, 0.9301, 0.9297, 0.9296, 0.9295,
        0.9307, 0.9290, 0.9297, 0.9295, 0.9288, 0.9300, 0.9300, 0.9315, 0.9292,
        0.9297, 0.9305, 0.9323, 0.9328, 0.9291, 0.9293, 0.9308, 0.9329, 0.9302,
        0.9297, 0.9303, 0.9301, 0.9290, 0.9294, 0.9305, 0.9285, 0.9295, 0.9291,
        0.9292, 0.9296, 0.9300, 0.9297, 0.9297, 0.9302, 0.9293, 0.9297, 0.9297,
        0.9292, 0.9291], device='cuda:0', requires_grad=True)
Epoch: 020/100, Runtime 4.838385, Loss 0.484995, forward nfe 1314, backward nfe 472, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9258, 0.9262, 0.9262, 0.9259, 0.9262, 0.9265, 0.9261, 0.9266, 0.9260,
        0.9259, 0.9262, 0.9309, 0.9300, 0.9261, 0.9254, 0.9257, 0.9259, 0.9262,
        0.9260, 0.9261, 0.9274, 0.9272, 0.9266, 0.9265, 0.9262, 0.9260, 0.9257,
        0.9270, 0.9258, 0.9265, 0.9260, 0.9273, 0.9259, 0.9266, 0.9261, 0.9270,
        0.9267, 0.9262, 0.9257, 0.9291, 0.9259, 0.9262, 0.9254, 0.9256, 0.9265,
        0.9260, 0.9266, 0.9273, 0.9263, 0.9263, 0.9282, 0.9262, 0.9255, 0.9275,
        0.9270, 0.9251, 0.9261, 0.9262, 0.9253, 0.9261, 0.9262, 0.9260, 0.9279,
        0.9260, 0.9253, 0.9262, 0.9288, 0.9268, 0.9261, 0.9265, 0.9261, 0.9261,
        0.9264, 0.9273, 0.9261, 0.9261, 0.9275, 0.9261, 0.9255, 0.9260, 0.9249,
        0.9272, 0.9274, 0.9261, 0.9256, 0.9260, 0.9266, 0.9265, 0.9261, 0.9260,
        0.9273, 0.9255, 0.9262, 0.9260, 0.9252, 0.9267, 0.9267, 0.9284, 0.9257,
        0.9262, 0.9271, 0.9293, 0.9298, 0.9257, 0.9258, 0.9275, 0.9299, 0.9269,
        0.9262, 0.9272, 0.9268, 0.9255, 0.9261, 0.9270, 0.9248, 0.9262, 0.9257,
        0.9257, 0.9263, 0.9265, 0.9262, 0.9262, 0.9268, 0.9258, 0.9263, 0.9264,
        0.9258, 0.9257], device='cuda:0', requires_grad=True)
Epoch: 021/100, Runtime 5.010617, Loss 0.450858, forward nfe 1390, backward nfe 498, Train: 0.9100, Val: 0.8377, Test: 0.8313, Best time: 1.0000
Traceback (most recent call last):
  File "run_GNN.py", line 259, in main
    loss = train(model, optimizer, data, pos_encoding)
  File "run_GNN.py", line 70, in train
    out = model(feat, pos_encoding)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/GNN_early.py", line 84, in forward
    z = self.odeblock(x)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/block_constant.py", line 45, in forward
    state_dt = integrator(
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/adjoint.py", line 198, in odeint_adjoint
    ans = OdeintAdjointMethod.apply(shapes, func, y0, t, rtol, atol, method, options, event_fn, adjoint_rtol, adjoint_atol,
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/adjoint.py", line 25, in forward
    ans = odeint(func, y0, t, rtol=rtol, atol=atol, method=method, options=options, event_fn=event_fn)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/odeint.py", line 77, in odeint
    solution = solver.integrate(t)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/solvers.py", line 30, in integrate
    solution[i] = self._advance(t[i])
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/rk_common.py", line 194, in _advance
    self.rk_state = self._adaptive_step(self.rk_state)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/rk_common.py", line 255, in _adaptive_step
    y1, f1, y1_error, k = _runge_kutta_step(self.func, y0, f0, t0, dt, t1, tableau=self.tableau)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/rk_common.py", line 76, in _runge_kutta_step
    f = func(ti, yi, perturb=perturb)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py", line 189, in forward
    return self.base_func(t, y)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py", line 189, in forward
    return self.base_func(t, y)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/function_transformer_attention.py", line 46, in forward
    attention, values = self.multihead_att_layer(x, self.edge_index)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/function_transformer_attention.py", line 269, in forward
    attention = softmax(prods, edge[self.opt['attention_norm_idx']])
KeyboardInterrupt
best val accuracy 0.837692 with test accuracy 0.831327 at epoch 12 and best time 1.000000