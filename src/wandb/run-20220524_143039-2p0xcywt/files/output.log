/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py:11: UserWarning: Dopri5Solver: Unexpected arguments {'step_size': 1}
  warnings.warn('{}: Unexpected arguments {}'.format(solver.__class__.__name__, unused_kwargs))
/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py:11: UserWarning: EarlyStopDopri5: Unexpected arguments {'step_size': 1}
  warnings.warn('{}: Unexpected arguments {}'.format(solver.__class__.__name__, unused_kwargs))
****************** Extended Laplacian Function V.3 ******************
K =  None
Alpha =  1.0
*********************************************************************
****************** Extended Laplacian Function V.3 ******************
K =  None
Alpha =  1.0
*********************************************************************
GNNEarly
m1.module.weight
torch.Size([80, 1433])
m1.module.bias
torch.Size([80])
m2.module.weight
torch.Size([7, 80])
m2.module.bias
torch.Size([7])
odeblock.odefunc.alpha_train
torch.Size([])
odeblock.odefunc.beta_train
torch.Size([])
odeblock.odefunc.alpha_sc
torch.Size([1])
odeblock.odefunc.beta_sc
torch.Size([1])
odeblock.odefunc.w
torch.Size([80, 80])
odeblock.odefunc.d
torch.Size([80])
odeblock.odefunc.k_d
torch.Size([80])
odeblock.reg_odefunc.odefunc.alpha_train
torch.Size([])
odeblock.reg_odefunc.odefunc.beta_train
torch.Size([])
odeblock.reg_odefunc.odefunc.alpha_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.beta_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.w
torch.Size([80, 80])
odeblock.reg_odefunc.odefunc.d
torch.Size([80])
odeblock.reg_odefunc.odefunc.k_d
torch.Size([80])
odeblock.multihead_att_layer.Q.weight
torch.Size([128, 80])
odeblock.multihead_att_layer.Q.bias
torch.Size([128])
odeblock.multihead_att_layer.V.weight
torch.Size([128, 80])
odeblock.multihead_att_layer.V.bias
torch.Size([128])
odeblock.multihead_att_layer.K.weight
torch.Size([128, 80])
odeblock.multihead_att_layer.K.bias
torch.Size([128])
odeblock.multihead_att_layer.Wout.weight
torch.Size([80, 16])
odeblock.multihead_att_layer.Wout.bias
torch.Size([80])
K_d =  Parameter containing:
tensor([0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771],
       device='cuda:0', requires_grad=True)
Epoch: 001/100, Runtime 0.792285, Loss 1.945565, forward nfe 14, backward nfe 0, Train: 0.8714, Val: 0.4779, Test: 0.4995, Best time: 4.2144
K_d =  Parameter containing:
tensor([0.9548, 0.9544, 0.9547, 0.9545, 0.9547, 0.9547, 0.9553, 0.9543, 0.9549,
        0.9544, 0.9548, 0.9544, 0.9543, 0.9542, 0.9545, 0.9543, 0.9542, 0.9550,
        0.9551, 0.9542, 0.9547, 0.9544, 0.9544, 0.9546, 0.9546, 0.9545, 0.9543,
        0.9544, 0.9553, 0.9546, 0.9549, 0.9548, 0.9546, 0.9547, 0.9549, 0.9545,
        0.9543, 0.9545, 0.9548, 0.9544, 0.9547, 0.9542, 0.9542, 0.9542, 0.9542,
        0.9544, 0.9542, 0.9545, 0.9543, 0.9548, 0.9548, 0.9542, 0.9544, 0.9543,
        0.9545, 0.9544, 0.9557, 0.9545, 0.9546, 0.9543, 0.9542, 0.9543, 0.9547,
        0.9544, 0.9542, 0.9545, 0.9542, 0.9547, 0.9543, 0.9543, 0.9544, 0.9546,
        0.9547, 0.9543, 0.9543, 0.9542, 0.9542, 0.9543, 0.9541, 0.9547],
       device='cuda:0', requires_grad=True)
Epoch: 002/100, Runtime 0.651316, Loss 1.737323, forward nfe 54, backward nfe 0, Train: 0.9429, Val: 0.5669, Test: 0.6112, Best time: 3.9781
K_d =  Parameter containing:
tensor([0.9326, 0.9319, 0.9324, 0.9319, 0.9333, 0.9322, 0.9335, 0.9316, 0.9337,
        0.9318, 0.9325, 0.9318, 0.9332, 0.9313, 0.9319, 0.9316, 0.9316, 0.9332,
        0.9330, 0.9314, 0.9322, 0.9317, 0.9318, 0.9326, 0.9321, 0.9320, 0.9316,
        0.9318, 0.9336, 0.9323, 0.9325, 0.9324, 0.9325, 0.9332, 0.9327, 0.9318,
        0.9315, 0.9319, 0.9324, 0.9318, 0.9331, 0.9314, 0.9317, 0.9328, 0.9313,
        0.9317, 0.9318, 0.9320, 0.9318, 0.9326, 0.9327, 0.9315, 0.9317, 0.9314,
        0.9323, 0.9321, 0.9337, 0.9321, 0.9326, 0.9320, 0.9320, 0.9317, 0.9330,
        0.9324, 0.9313, 0.9318, 0.9317, 0.9324, 0.9319, 0.9318, 0.9317, 0.9324,
        0.9322, 0.9315, 0.9315, 0.9316, 0.9317, 0.9315, 0.9314, 0.9322],
       device='cuda:0', requires_grad=True)
Epoch: 003/100, Runtime 0.648200, Loss 1.443126, forward nfe 94, backward nfe 0, Train: 0.9643, Val: 0.6059, Test: 0.6416, Best time: 3.8074
K_d =  Parameter containing:
tensor([0.9104, 0.9094, 0.9103, 0.9093, 0.9119, 0.9110, 0.9114, 0.9101, 0.9121,
        0.9092, 0.9110, 0.9091, 0.9119, 0.9085, 0.9092, 0.9091, 0.9100, 0.9111,
        0.9107, 0.9108, 0.9098, 0.9096, 0.9092, 0.9103, 0.9095, 0.9102, 0.9091,
        0.9093, 0.9121, 0.9100, 0.9103, 0.9103, 0.9108, 0.9116, 0.9109, 0.9095,
        0.9090, 0.9101, 0.9102, 0.9095, 0.9114, 0.9087, 0.9094, 0.9110, 0.9091,
        0.9095, 0.9097, 0.9095, 0.9094, 0.9101, 0.9108, 0.9088, 0.9099, 0.9102,
        0.9103, 0.9097, 0.9118, 0.9098, 0.9109, 0.9098, 0.9099, 0.9092, 0.9112,
        0.9107, 0.9117, 0.9092, 0.9093, 0.9099, 0.9094, 0.9095, 0.9089, 0.9102,
        0.9099, 0.9089, 0.9090, 0.9093, 0.9091, 0.9088, 0.9090, 0.9100],
       device='cuda:0', requires_grad=True)
Epoch: 004/100, Runtime 0.837329, Loss 1.128083, forward nfe 140, backward nfe 0, Train: 0.9857, Val: 0.6559, Test: 0.6914, Best time: 3.7231
K_d =  Parameter containing:
tensor([0.8883, 0.8870, 0.8881, 0.8866, 0.8908, 0.8897, 0.8893, 0.8884, 0.8907,
        0.8865, 0.8898, 0.8868, 0.8907, 0.8859, 0.8869, 0.8864, 0.8894, 0.8890,
        0.8884, 0.8901, 0.8876, 0.8879, 0.8869, 0.8879, 0.8872, 0.8898, 0.8865,
        0.8871, 0.8906, 0.8877, 0.8879, 0.8882, 0.8892, 0.8908, 0.8899, 0.8870,
        0.8864, 0.8892, 0.8883, 0.8870, 0.8894, 0.8862, 0.8871, 0.8894, 0.8868,
        0.8873, 0.8876, 0.8869, 0.8871, 0.8901, 0.8889, 0.8871, 0.8885, 0.8894,
        0.8882, 0.8888, 0.8898, 0.8879, 0.8892, 0.8877, 0.8888, 0.8870, 0.8895,
        0.8891, 0.8929, 0.8866, 0.8870, 0.8873, 0.8873, 0.8871, 0.8864, 0.8879,
        0.8878, 0.8864, 0.8868, 0.8888, 0.8875, 0.8865, 0.8866, 0.8884],
       device='cuda:0', requires_grad=True)
Epoch: 005/100, Runtime 0.682314, Loss 0.744920, forward nfe 186, backward nfe 0, Train: 0.9786, Val: 0.6875, Test: 0.7320, Best time: 3.6922
K_d =  Parameter containing:
tensor([0.8667, 0.8648, 0.8663, 0.8642, 0.8697, 0.8688, 0.8672, 0.8666, 0.8698,
        0.8638, 0.8687, 0.8647, 0.8695, 0.8635, 0.8644, 0.8639, 0.8686, 0.8671,
        0.8667, 0.8692, 0.8658, 0.8670, 0.8649, 0.8654, 0.8653, 0.8692, 0.8639,
        0.8651, 0.8696, 0.8657, 0.8654, 0.8660, 0.8681, 0.8697, 0.8688, 0.8646,
        0.8638, 0.8685, 0.8661, 0.8651, 0.8680, 0.8640, 0.8651, 0.8685, 0.8643,
        0.8653, 0.8664, 0.8644, 0.8648, 0.8696, 0.8670, 0.8652, 0.8683, 0.8685,
        0.8666, 0.8680, 0.8677, 0.8661, 0.8678, 0.8657, 0.8673, 0.8652, 0.8680,
        0.8680, 0.8735, 0.8641, 0.8649, 0.8657, 0.8652, 0.8647, 0.8642, 0.8660,
        0.8657, 0.8641, 0.8647, 0.8678, 0.8662, 0.8641, 0.8645, 0.8669],
       device='cuda:0', requires_grad=True)
Epoch: 006/100, Runtime 0.739815, Loss 0.523634, forward nfe 232, backward nfe 0, Train: 0.9786, Val: 0.7110, Test: 0.7411, Best time: 3.6996
K_d =  Parameter containing:
tensor([0.8453, 0.8430, 0.8446, 0.8418, 0.8490, 0.8487, 0.8453, 0.8448, 0.8497,
        0.8414, 0.8478, 0.8431, 0.8491, 0.8417, 0.8422, 0.8416, 0.8475, 0.8458,
        0.8454, 0.8481, 0.8447, 0.8457, 0.8432, 0.8433, 0.8436, 0.8482, 0.8415,
        0.8438, 0.8491, 0.8437, 0.8429, 0.8443, 0.8471, 0.8489, 0.8479, 0.8425,
        0.8417, 0.8476, 0.8446, 0.8435, 0.8469, 0.8420, 0.8435, 0.8479, 0.8423,
        0.8432, 0.8460, 0.8421, 0.8425, 0.8493, 0.8451, 0.8437, 0.8477, 0.8478,
        0.8459, 0.8472, 0.8458, 0.8445, 0.8469, 0.8438, 0.8460, 0.8439, 0.8470,
        0.8476, 0.8535, 0.8421, 0.8433, 0.8440, 0.8433, 0.8426, 0.8422, 0.8444,
        0.8443, 0.8421, 0.8432, 0.8467, 0.8451, 0.8419, 0.8430, 0.8456],
       device='cuda:0', requires_grad=True)
Epoch: 007/100, Runtime 0.867606, Loss 0.365816, forward nfe 278, backward nfe 0, Train: 0.9857, Val: 0.7176, Test: 0.7462, Best time: 3.7403
K_d =  Parameter containing:
tensor([0.8238, 0.8218, 0.8232, 0.8197, 0.8287, 0.8299, 0.8239, 0.8241, 0.8306,
        0.8198, 0.8274, 0.8222, 0.8296, 0.8205, 0.8203, 0.8199, 0.8267, 0.8255,
        0.8247, 0.8272, 0.8242, 0.8244, 0.8221, 0.8216, 0.8226, 0.8269, 0.8193,
        0.8233, 0.8292, 0.8223, 0.8206, 0.8235, 0.8265, 0.8286, 0.8275, 0.8205,
        0.8199, 0.8270, 0.8233, 0.8224, 0.8268, 0.8205, 0.8224, 0.8277, 0.8208,
        0.8217, 0.8260, 0.8205, 0.8208, 0.8294, 0.8231, 0.8227, 0.8271, 0.8273,
        0.8255, 0.8265, 0.8240, 0.8233, 0.8263, 0.8222, 0.8257, 0.8233, 0.8267,
        0.8276, 0.8340, 0.8205, 0.8217, 0.8229, 0.8222, 0.8210, 0.8205, 0.8229,
        0.8237, 0.8204, 0.8220, 0.8255, 0.8246, 0.8204, 0.8218, 0.8245],
       device='cuda:0', requires_grad=True)
Epoch: 008/100, Runtime 0.716133, Loss 0.247893, forward nfe 324, backward nfe 0, Train: 0.9857, Val: 0.7176, Test: 0.7462, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.8027, 0.8014, 0.8019, 0.7977, 0.8086, 0.8124, 0.8030, 0.8042, 0.8124,
        0.7988, 0.8076, 0.8020, 0.8110, 0.8000, 0.7988, 0.7987, 0.8056, 0.8059,
        0.8047, 0.8063, 0.8043, 0.8033, 0.8017, 0.8005, 0.8022, 0.8056, 0.7975,
        0.8035, 0.8094, 0.8012, 0.7988, 0.8036, 0.8065, 0.8094, 0.8078, 0.7987,
        0.7981, 0.8067, 0.8023, 0.8019, 0.8076, 0.7993, 0.8019, 0.8081, 0.8000,
        0.8004, 0.8070, 0.7995, 0.7994, 0.8102, 0.8017, 0.8026, 0.8069, 0.8072,
        0.8061, 0.8060, 0.8024, 0.8026, 0.8062, 0.8007, 0.8061, 0.8034, 0.8069,
        0.8082, 0.8143, 0.7994, 0.8010, 0.8018, 0.8015, 0.8000, 0.7991, 0.8012,
        0.8041, 0.7991, 0.8011, 0.8041, 0.8048, 0.7992, 0.8012, 0.8042],
       device='cuda:0', requires_grad=True)
Epoch: 009/100, Runtime 0.764073, Loss 0.212568, forward nfe 370, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 3.8932
K_d =  Parameter containing:
tensor([0.7820, 0.7814, 0.7809, 0.7758, 0.7891, 0.7953, 0.7825, 0.7850, 0.7950,
        0.7783, 0.7884, 0.7820, 0.7931, 0.7802, 0.7778, 0.7778, 0.7846, 0.7866,
        0.7852, 0.7856, 0.7857, 0.7820, 0.7819, 0.7802, 0.7822, 0.7843, 0.7758,
        0.7840, 0.7899, 0.7802, 0.7772, 0.7843, 0.7876, 0.7906, 0.7890, 0.7773,
        0.7766, 0.7869, 0.7817, 0.7820, 0.7885, 0.7783, 0.7820, 0.7890, 0.7795,
        0.7795, 0.7888, 0.7788, 0.7782, 0.7914, 0.7805, 0.7834, 0.7870, 0.7878,
        0.7875, 0.7862, 0.7811, 0.7824, 0.7867, 0.7795, 0.7869, 0.7839, 0.7876,
        0.7893, 0.7947, 0.7788, 0.7806, 0.7814, 0.7809, 0.7794, 0.7779, 0.7795,
        0.7849, 0.7781, 0.7810, 0.7831, 0.7854, 0.7785, 0.7807, 0.7847],
       device='cuda:0', requires_grad=True)
Epoch: 010/100, Runtime 0.833668, Loss 0.159051, forward nfe 416, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.7614, 0.7623, 0.7604, 0.7543, 0.7701, 0.7796, 0.7626, 0.7663, 0.7782,
        0.7584, 0.7695, 0.7626, 0.7759, 0.7613, 0.7575, 0.7574, 0.7638, 0.7683,
        0.7665, 0.7655, 0.7677, 0.7609, 0.7627, 0.7603, 0.7625, 0.7630, 0.7543,
        0.7653, 0.7712, 0.7598, 0.7559, 0.7660, 0.7691, 0.7725, 0.7705, 0.7563,
        0.7553, 0.7676, 0.7619, 0.7627, 0.7702, 0.7579, 0.7625, 0.7705, 0.7596,
        0.7588, 0.7717, 0.7589, 0.7578, 0.7732, 0.7595, 0.7648, 0.7674, 0.7687,
        0.7699, 0.7668, 0.7600, 0.7630, 0.7682, 0.7585, 0.7685, 0.7646, 0.7688,
        0.7714, 0.7755, 0.7591, 0.7614, 0.7613, 0.7612, 0.7594, 0.7572, 0.7581,
        0.7666, 0.7576, 0.7613, 0.7621, 0.7666, 0.7586, 0.7612, 0.7655],
       device='cuda:0', requires_grad=True)
Epoch: 011/100, Runtime 0.642248, Loss 0.120737, forward nfe 462, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.7412, 0.7442, 0.7407, 0.7335, 0.7516, 0.7648, 0.7435, 0.7478, 0.7617,
        0.7392, 0.7509, 0.7438, 0.7594, 0.7428, 0.7382, 0.7374, 0.7435, 0.7509,
        0.7484, 0.7459, 0.7500, 0.7401, 0.7439, 0.7413, 0.7432, 0.7415, 0.7331,
        0.7471, 0.7525, 0.7399, 0.7349, 0.7485, 0.7509, 0.7547, 0.7522, 0.7355,
        0.7342, 0.7490, 0.7420, 0.7437, 0.7529, 0.7380, 0.7433, 0.7525, 0.7401,
        0.7390, 0.7552, 0.7396, 0.7377, 0.7556, 0.7388, 0.7466, 0.7484, 0.7506,
        0.7528, 0.7474, 0.7401, 0.7441, 0.7503, 0.7375, 0.7505, 0.7456, 0.7508,
        0.7540, 0.7571, 0.7402, 0.7429, 0.7416, 0.7423, 0.7398, 0.7367, 0.7371,
        0.7492, 0.7375, 0.7422, 0.7413, 0.7480, 0.7392, 0.7422, 0.7471],
       device='cuda:0', requires_grad=True)
Epoch: 012/100, Runtime 0.752302, Loss 0.118987, forward nfe 508, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.7213, 0.7267, 0.7212, 0.7130, 0.7337, 0.7505, 0.7247, 0.7299, 0.7457,
        0.7206, 0.7331, 0.7254, 0.7433, 0.7249, 0.7192, 0.7178, 0.7234, 0.7339,
        0.7311, 0.7262, 0.7326, 0.7194, 0.7254, 0.7228, 0.7245, 0.7205, 0.7122,
        0.7297, 0.7345, 0.7203, 0.7145, 0.7311, 0.7330, 0.7375, 0.7344, 0.7152,
        0.7139, 0.7307, 0.7228, 0.7253, 0.7362, 0.7185, 0.7243, 0.7350, 0.7212,
        0.7193, 0.7394, 0.7207, 0.7181, 0.7380, 0.7186, 0.7286, 0.7301, 0.7329,
        0.7362, 0.7283, 0.7208, 0.7257, 0.7330, 0.7171, 0.7331, 0.7271, 0.7330,
        0.7372, 0.7392, 0.7218, 0.7251, 0.7221, 0.7236, 0.7208, 0.7169, 0.7163,
        0.7322, 0.7178, 0.7234, 0.7209, 0.7299, 0.7203, 0.7240, 0.7291],
       device='cuda:0', requires_grad=True)
Epoch: 013/100, Runtime 0.792625, Loss 0.097903, forward nfe 554, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.7017, 0.7095, 0.7020, 0.6930, 0.7161, 0.7363, 0.7065, 0.7125, 0.7302,
        0.7022, 0.7158, 0.7073, 0.7277, 0.7070, 0.7007, 0.6989, 0.7038, 0.7175,
        0.7143, 0.7068, 0.7154, 0.6994, 0.7074, 0.7046, 0.7062, 0.7005, 0.6921,
        0.7127, 0.7171, 0.7010, 0.6946, 0.7142, 0.7151, 0.7205, 0.7169, 0.6954,
        0.6942, 0.7129, 0.7043, 0.7072, 0.7198, 0.6994, 0.7056, 0.7179, 0.7026,
        0.7001, 0.7236, 0.7021, 0.6988, 0.7205, 0.6992, 0.7109, 0.7121, 0.7154,
        0.7197, 0.7095, 0.7023, 0.7075, 0.7160, 0.6973, 0.7162, 0.7089, 0.7159,
        0.7206, 0.7216, 0.7036, 0.7075, 0.7032, 0.7053, 0.7023, 0.6974, 0.6961,
        0.7154, 0.6986, 0.7048, 0.7014, 0.7121, 0.7017, 0.7060, 0.7115],
       device='cuda:0', requires_grad=True)
Epoch: 014/100, Runtime 0.672074, Loss 0.085651, forward nfe 600, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.6823, 0.6925, 0.6832, 0.6736, 0.6988, 0.7225, 0.6886, 0.6954, 0.7148,
        0.6843, 0.6993, 0.6899, 0.7123, 0.6895, 0.6826, 0.6805, 0.6849, 0.7013,
        0.6979, 0.6877, 0.6982, 0.6799, 0.6898, 0.6867, 0.6883, 0.6816, 0.6725,
        0.6961, 0.7003, 0.6823, 0.6752, 0.6976, 0.6974, 0.7039, 0.6997, 0.6763,
        0.6753, 0.6956, 0.6866, 0.6895, 0.7040, 0.6807, 0.6871, 0.7013, 0.6845,
        0.6815, 0.7081, 0.6837, 0.6801, 0.7035, 0.6803, 0.6933, 0.6943, 0.6984,
        0.7035, 0.6913, 0.6845, 0.6895, 0.6996, 0.6781, 0.6995, 0.6910, 0.6989,
        0.7043, 0.7046, 0.6856, 0.6903, 0.6847, 0.6875, 0.6842, 0.6785, 0.6765,
        0.6991, 0.6797, 0.6864, 0.6825, 0.6947, 0.6834, 0.6885, 0.6941],
       device='cuda:0', requires_grad=True)
Epoch: 015/100, Runtime 0.776500, Loss 0.075887, forward nfe 646, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.6631, 0.6764, 0.6647, 0.6545, 0.6817, 0.7096, 0.6709, 0.6785, 0.7000,
        0.6669, 0.6830, 0.6731, 0.6974, 0.6723, 0.6655, 0.6626, 0.6663, 0.6860,
        0.6824, 0.6690, 0.6811, 0.6607, 0.6724, 0.6694, 0.6706, 0.6632, 0.6532,
        0.6798, 0.6840, 0.6643, 0.6559, 0.6819, 0.6799, 0.6875, 0.6828, 0.6577,
        0.6568, 0.6788, 0.6696, 0.6720, 0.6890, 0.6626, 0.6688, 0.6854, 0.6673,
        0.6632, 0.6932, 0.6659, 0.6616, 0.6867, 0.6615, 0.6759, 0.6769, 0.6815,
        0.6881, 0.6732, 0.6672, 0.6719, 0.6836, 0.6592, 0.6834, 0.6733, 0.6822,
        0.6887, 0.6877, 0.6680, 0.6742, 0.6662, 0.6704, 0.6664, 0.6601, 0.6571,
        0.6835, 0.6613, 0.6681, 0.6639, 0.6775, 0.6653, 0.6720, 0.6768],
       device='cuda:0', requires_grad=True)
Epoch: 016/100, Runtime 0.745224, Loss 0.072990, forward nfe 692, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.6440, 0.6606, 0.6467, 0.6359, 0.6649, 0.6968, 0.6534, 0.6617, 0.6854,
        0.6499, 0.6669, 0.6568, 0.6829, 0.6556, 0.6488, 0.6452, 0.6483, 0.6713,
        0.6670, 0.6508, 0.6641, 0.6418, 0.6554, 0.6524, 0.6532, 0.6454, 0.6341,
        0.6640, 0.6680, 0.6466, 0.6369, 0.6669, 0.6627, 0.6714, 0.6662, 0.6396,
        0.6386, 0.6624, 0.6533, 0.6548, 0.6745, 0.6449, 0.6509, 0.6697, 0.6502,
        0.6454, 0.6786, 0.6483, 0.6435, 0.6702, 0.6429, 0.6588, 0.6595, 0.6649,
        0.6731, 0.6557, 0.6503, 0.6549, 0.6679, 0.6407, 0.6676, 0.6559, 0.6657,
        0.6734, 0.6714, 0.6508, 0.6584, 0.6481, 0.6538, 0.6488, 0.6422, 0.6382,
        0.6681, 0.6432, 0.6501, 0.6458, 0.6606, 0.6476, 0.6559, 0.6598],
       device='cuda:0', requires_grad=True)
Epoch: 017/100, Runtime 0.656622, Loss 0.071239, forward nfe 738, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.6253, 0.6456, 0.6290, 0.6176, 0.6483, 0.6846, 0.6362, 0.6451, 0.6713,
        0.6336, 0.6512, 0.6412, 0.6692, 0.6393, 0.6331, 0.6285, 0.6306, 0.6574,
        0.6523, 0.6328, 0.6473, 0.6235, 0.6388, 0.6358, 0.6360, 0.6277, 0.6154,
        0.6489, 0.6530, 0.6295, 0.6183, 0.6529, 0.6456, 0.6555, 0.6496, 0.6218,
        0.6208, 0.6462, 0.6375, 0.6379, 0.6610, 0.6277, 0.6331, 0.6541, 0.6335,
        0.6279, 0.6646, 0.6314, 0.6259, 0.6542, 0.6248, 0.6419, 0.6423, 0.6484,
        0.6584, 0.6385, 0.6338, 0.6383, 0.6529, 0.6224, 0.6523, 0.6386, 0.6496,
        0.6585, 0.6553, 0.6342, 0.6434, 0.6305, 0.6381, 0.6314, 0.6245, 0.6197,
        0.6535, 0.6256, 0.6324, 0.6277, 0.6441, 0.6305, 0.6403, 0.6430],
       device='cuda:0', requires_grad=True)
Epoch: 018/100, Runtime 0.846944, Loss 0.082981, forward nfe 784, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.6069, 0.6307, 0.6117, 0.5999, 0.6324, 0.6721, 0.6196, 0.6293, 0.6576,
        0.6181, 0.6361, 0.6260, 0.6560, 0.6233, 0.6175, 0.6123, 0.6133, 0.6441,
        0.6379, 0.6148, 0.6310, 0.6056, 0.6227, 0.6196, 0.6194, 0.6110, 0.5973,
        0.6346, 0.6380, 0.6124, 0.6004, 0.6397, 0.6291, 0.6403, 0.6337, 0.6046,
        0.6036, 0.6309, 0.6220, 0.6213, 0.6475, 0.6108, 0.6158, 0.6388, 0.6173,
        0.6109, 0.6510, 0.6148, 0.6086, 0.6385, 0.6071, 0.6253, 0.6254, 0.6328,
        0.6442, 0.6215, 0.6178, 0.6220, 0.6381, 0.6048, 0.6374, 0.6219, 0.6341,
        0.6441, 0.6391, 0.6177, 0.6288, 0.6129, 0.6225, 0.6148, 0.6074, 0.6017,
        0.6387, 0.6084, 0.6150, 0.6101, 0.6279, 0.6136, 0.6249, 0.6273],
       device='cuda:0', requires_grad=True)
Epoch: 019/100, Runtime 0.638506, Loss 0.106796, forward nfe 830, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.5888, 0.6166, 0.5943, 0.5821, 0.6166, 0.6605, 0.6035, 0.6143, 0.6447,
        0.6034, 0.6215, 0.6117, 0.6435, 0.6081, 0.6022, 0.5967, 0.5961, 0.6317,
        0.6241, 0.5968, 0.6157, 0.5879, 0.6071, 0.6038, 0.6034, 0.5942, 0.5797,
        0.6207, 0.6237, 0.5959, 0.5831, 0.6264, 0.6131, 0.6260, 0.6184, 0.5878,
        0.5869, 0.6157, 0.6072, 0.6053, 0.6348, 0.5944, 0.5992, 0.6239, 0.6014,
        0.5940, 0.6381, 0.5986, 0.5916, 0.6232, 0.5898, 0.6095, 0.6088, 0.6172,
        0.6307, 0.6051, 0.6021, 0.6062, 0.6238, 0.5877, 0.6229, 0.6059, 0.6191,
        0.6302, 0.6227, 0.6015, 0.6148, 0.5956, 0.6077, 0.5987, 0.5905, 0.5837,
        0.6246, 0.5917, 0.5981, 0.5924, 0.6124, 0.5972, 0.6101, 0.6117],
       device='cuda:0', requires_grad=True)
Epoch: 020/100, Runtime 0.611842, Loss 0.116113, forward nfe 870, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.5711, 0.6025, 0.5770, 0.5647, 0.6010, 0.6488, 0.5875, 0.5996, 0.6318,
        0.5888, 0.6069, 0.5976, 0.6309, 0.5933, 0.5870, 0.5813, 0.5793, 0.6193,
        0.6105, 0.5794, 0.6008, 0.5706, 0.5915, 0.5881, 0.5876, 0.5782, 0.5625,
        0.6069, 0.6099, 0.5797, 0.5662, 0.6134, 0.5977, 0.6116, 0.6037, 0.5713,
        0.5704, 0.6008, 0.5927, 0.5895, 0.6224, 0.5782, 0.5828, 0.6093, 0.5857,
        0.5774, 0.6253, 0.5824, 0.5753, 0.6081, 0.5729, 0.5941, 0.5925, 0.6021,
        0.6175, 0.5891, 0.5868, 0.5903, 0.6100, 0.5711, 0.6084, 0.5902, 0.6042,
        0.6164, 0.6071, 0.5854, 0.6009, 0.5790, 0.5933, 0.5828, 0.5742, 0.5661,
        0.6107, 0.5754, 0.5815, 0.5752, 0.5970, 0.5813, 0.5955, 0.5964],
       device='cuda:0', requires_grad=True)
Epoch: 021/100, Runtime 0.690255, Loss 0.079606, forward nfe 910, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.5540, 0.5888, 0.5604, 0.5481, 0.5862, 0.6371, 0.5726, 0.5851, 0.6195,
        0.5748, 0.5927, 0.5838, 0.6187, 0.5789, 0.5722, 0.5664, 0.5631, 0.6074,
        0.5970, 0.5626, 0.5864, 0.5540, 0.5762, 0.5733, 0.5723, 0.5623, 0.5460,
        0.5936, 0.5964, 0.5638, 0.5498, 0.6009, 0.5829, 0.5976, 0.5894, 0.5552,
        0.5543, 0.5866, 0.5784, 0.5739, 0.6099, 0.5624, 0.5672, 0.5949, 0.5702,
        0.5611, 0.6128, 0.5665, 0.5594, 0.5936, 0.5565, 0.5793, 0.5769, 0.5880,
        0.6045, 0.5737, 0.5719, 0.5748, 0.5966, 0.5548, 0.5940, 0.5751, 0.5901,
        0.6030, 0.5918, 0.5699, 0.5874, 0.5628, 0.5791, 0.5677, 0.5584, 0.5492,
        0.5965, 0.5596, 0.5655, 0.5584, 0.5817, 0.5659, 0.5812, 0.5821],
       device='cuda:0', requires_grad=True)
Epoch: 022/100, Runtime 0.731664, Loss 0.093563, forward nfe 950, backward nfe 0, Train: 0.9857, Val: 0.7191, Test: 0.7391, Best time: 1.0000
Traceback (most recent call last):
  File "run_GNN.py", line 265, in main
    tmp_train_acc, tmp_val_acc, tmp_test_acc = this_test(model, data, pos_encoding, opt)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "run_GNN.py", line 140, in test
    logits, accs = model(feat, pos_encoding), []
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/GNN_early.py", line 84, in forward
    z = self.odeblock(x)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/block_transformer_attention.py", line 61, in forward
    state_dt = integrator(
  File "/media/data-share/hieunm60/graph-neural-pde/src/early_stop_solver.py", line 301, in __call__
    t, solution = self.solver.integrate(t)
  File "/media/data-share/hieunm60/graph-neural-pde/src/early_stop_solver.py", line 65, in integrate
    new_t, y = self.advance(t[i])
  File "/media/data-share/hieunm60/graph-neural-pde/src/early_stop_solver.py", line 77, in advance
    self.rk_state = self._adaptive_step(self.rk_state)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/rk_common.py", line 255, in _adaptive_step
    y1, f1, y1_error, k = _runge_kutta_step(self.func, y0, f0, t0, dt, t1, tableau=self.tableau)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/rk_common.py", line 68, in _runge_kutta_step
    if alpha_i == 1.:
KeyboardInterrupt
best val accuracy 0.719118 with test accuracy 0.739086 at epoch 9 and best time 1.000000