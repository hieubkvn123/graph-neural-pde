
Downloading https://github.com/shchur/gnn-benchmark/raw/master/data/npz/amazon_electronics_photo.npz
Processing...
Done!
/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py:11: UserWarning: Dopri5Solver: Unexpected arguments {'step_size': 1, 'max_iters': 100}
  warnings.warn('{}: Unexpected arguments {}'.format(solver.__class__.__name__, unused_kwargs))
****************** Adaptive GRAND transformer function ******************
****************** Adaptive GRAND transformer function ******************
GNNEarly
m1.module.weight
torch.Size([64, 745])
m1.module.bias
torch.Size([64])
m2.module.weight
torch.Size([8, 64])
m2.module.bias
torch.Size([8])
bn_in.weight
torch.Size([64])
bn_in.bias
torch.Size([64])
bn_out.weight
torch.Size([64])
bn_out.bias
torch.Size([64])
odeblock.odefunc.alpha_train
torch.Size([])
odeblock.odefunc.beta_train
torch.Size([])
odeblock.odefunc.alpha_sc
torch.Size([1])
odeblock.odefunc.beta_sc
torch.Size([1])
odeblock.odefunc.k_d
torch.Size([64])
odeblock.odefunc.multihead_att_layer.Q.weight
torch.Size([64, 64])
odeblock.odefunc.multihead_att_layer.Q.bias
torch.Size([64])
odeblock.odefunc.multihead_att_layer.V.weight
torch.Size([64, 64])
odeblock.odefunc.multihead_att_layer.V.bias
torch.Size([64])
odeblock.odefunc.multihead_att_layer.K.weight
torch.Size([64, 64])
odeblock.odefunc.multihead_att_layer.K.bias
torch.Size([64])
odeblock.odefunc.multihead_att_layer.Wout.weight
torch.Size([64, 16])
odeblock.odefunc.multihead_att_layer.Wout.bias
torch.Size([64])
odeblock.reg_odefunc.odefunc.alpha_train
torch.Size([])
odeblock.reg_odefunc.odefunc.beta_train
torch.Size([])
odeblock.reg_odefunc.odefunc.alpha_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.beta_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.k_d
torch.Size([64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.Q.weight
torch.Size([64, 64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.Q.bias
torch.Size([64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.V.weight
torch.Size([64, 64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.V.bias
torch.Size([64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.K.weight
torch.Size([64, 64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.K.bias
torch.Size([64])
odeblock.reg_odefunc.odefunc.multihead_att_layer.Wout.weight
torch.Size([64, 16])
odeblock.reg_odefunc.odefunc.multihead_att_layer.Wout.bias
torch.Size([64])
/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py:11: UserWarning: RK4: Unexpected arguments {'max_iters': 100}
  warnings.warn('{}: Unexpected arguments {}'.format(solver.__class__.__name__, unused_kwargs))
/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py:11: UserWarning: EarlyStopDopri5: Unexpected arguments {'step_size': 1, 'max_iters': 100}
  warnings.warn('{}: Unexpected arguments {}'.format(solver.__class__.__name__, unused_kwargs))
K_d =  Parameter containing:
tensor([0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944,
        0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944,
        0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944,
        0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944,
        0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944,
        0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944,
        0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944, 0.9944,
        0.9944], device='cuda:0', requires_grad=True)
Epoch: 001/100, Runtime 4.109096, Loss 2.105278, forward nfe 20, backward nfe 4, Train: 0.2437, Val: 0.1418, Test: 0.1553, Best time: 0.0957
K_d =  Parameter containing:
tensor([0.9891, 0.9890, 0.9889, 0.9893, 0.9889, 0.9889, 0.9889, 0.9889, 0.9889,
        0.9889, 0.9889, 0.9893, 0.9889, 0.9892, 0.9892, 0.9889, 0.9889, 0.9889,
        0.9893, 0.9889, 0.9890, 0.9890, 0.9889, 0.9897, 0.9896, 0.9891, 0.9892,
        0.9889, 0.9890, 0.9889, 0.9889, 0.9889, 0.9889, 0.9889, 0.9893, 0.9889,
        0.9889, 0.9889, 0.9897, 0.9929, 0.9890, 0.9889, 0.9889, 0.9893, 0.9889,
        0.9889, 0.9889, 0.9890, 0.9889, 0.9889, 0.9889, 0.9889, 0.9914, 0.9891,
        0.9891, 0.9889, 0.9889, 0.9889, 0.9902, 0.9893, 0.9891, 0.9894, 0.9890,
        0.9889], device='cuda:0', requires_grad=True)
Epoch: 002/100, Runtime 1.528850, Loss 1.791507, forward nfe 66, backward nfe 8, Train: 0.4562, Val: 0.2306, Test: 0.2551, Best time: 0.0891
K_d =  Parameter containing:
tensor([0.9836, 0.9836, 0.9833, 0.9843, 0.9834, 0.9833, 0.9839, 0.9833, 0.9834,
        0.9834, 0.9834, 0.9842, 0.9834, 0.9840, 0.9838, 0.9834, 0.9834, 0.9834,
        0.9843, 0.9833, 0.9835, 0.9836, 0.9834, 0.9848, 0.9844, 0.9836, 0.9837,
        0.9835, 0.9835, 0.9833, 0.9833, 0.9833, 0.9833, 0.9834, 0.9848, 0.9834,
        0.9833, 0.9833, 0.9846, 0.9910, 0.9836, 0.9834, 0.9834, 0.9840, 0.9834,
        0.9836, 0.9833, 0.9836, 0.9834, 0.9834, 0.9834, 0.9840, 0.9883, 0.9839,
        0.9837, 0.9834, 0.9833, 0.9835, 0.9854, 0.9842, 0.9837, 0.9862, 0.9835,
        0.9833], device='cuda:0', requires_grad=True)
Epoch: 003/100, Runtime 1.786124, Loss 1.602945, forward nfe 112, backward nfe 12, Train: 0.6875, Val: 0.3634, Test: 0.3848, Best time: 0.0881
K_d =  Parameter containing:
tensor([0.9781, 0.9782, 0.9777, 0.9792, 0.9778, 0.9777, 0.9799, 0.9778, 0.9781,
        0.9779, 0.9778, 0.9790, 0.9778, 0.9787, 0.9785, 0.9779, 0.9780, 0.9780,
        0.9790, 0.9779, 0.9780, 0.9780, 0.9778, 0.9796, 0.9791, 0.9781, 0.9783,
        0.9781, 0.9780, 0.9779, 0.9778, 0.9778, 0.9777, 0.9778, 0.9798, 0.9779,
        0.9778, 0.9778, 0.9793, 0.9890, 0.9782, 0.9779, 0.9778, 0.9786, 0.9781,
        0.9782, 0.9777, 0.9782, 0.9779, 0.9779, 0.9779, 0.9794, 0.9844, 0.9787,
        0.9782, 0.9779, 0.9782, 0.9780, 0.9803, 0.9793, 0.9784, 0.9830, 0.9780,
        0.9778], device='cuda:0', requires_grad=True)
Epoch: 004/100, Runtime 1.515638, Loss 1.439005, forward nfe 158, backward nfe 16, Train: 0.8063, Val: 0.5269, Test: 0.5383, Best time: 0.0883
K_d =  Parameter containing:
tensor([0.9727, 0.9728, 0.9722, 0.9739, 0.9723, 0.9722, 0.9755, 0.9722, 0.9726,
        0.9723, 0.9722, 0.9737, 0.9723, 0.9732, 0.9733, 0.9724, 0.9732, 0.9725,
        0.9738, 0.9724, 0.9724, 0.9725, 0.9722, 0.9743, 0.9738, 0.9726, 0.9728,
        0.9727, 0.9726, 0.9725, 0.9722, 0.9722, 0.9724, 0.9724, 0.9752, 0.9723,
        0.9723, 0.9722, 0.9740, 0.9861, 0.9727, 0.9725, 0.9724, 0.9732, 0.9728,
        0.9727, 0.9722, 0.9727, 0.9724, 0.9723, 0.9723, 0.9745, 0.9806, 0.9735,
        0.9726, 0.9723, 0.9729, 0.9726, 0.9751, 0.9742, 0.9733, 0.9799, 0.9725,
        0.9724], device='cuda:0', requires_grad=True)
Epoch: 005/100, Runtime 1.707605, Loss 1.233176, forward nfe 204, backward nfe 20, Train: 0.8812, Val: 0.6261, Test: 0.6459, Best time: 0.5696
K_d =  Parameter containing:
tensor([0.9672, 0.9674, 0.9667, 0.9686, 0.9667, 0.9667, 0.9707, 0.9667, 0.9672,
        0.9667, 0.9668, 0.9683, 0.9667, 0.9678, 0.9680, 0.9669, 0.9683, 0.9669,
        0.9689, 0.9670, 0.9669, 0.9669, 0.9666, 0.9690, 0.9684, 0.9670, 0.9673,
        0.9673, 0.9672, 0.9670, 0.9666, 0.9667, 0.9669, 0.9673, 0.9703, 0.9667,
        0.9668, 0.9667, 0.9686, 0.9829, 0.9672, 0.9670, 0.9671, 0.9677, 0.9676,
        0.9673, 0.9666, 0.9674, 0.9670, 0.9668, 0.9668, 0.9695, 0.9766, 0.9683,
        0.9671, 0.9667, 0.9678, 0.9671, 0.9697, 0.9695, 0.9682, 0.9780, 0.9669,
        0.9671], device='cuda:0', requires_grad=True)
Epoch: 006/100, Runtime 1.651678, Loss 1.093124, forward nfe 250, backward nfe 24, Train: 0.9313, Val: 0.7201, Test: 0.7485, Best time: 1.6057
K_d =  Parameter containing:
tensor([0.9617, 0.9620, 0.9611, 0.9632, 0.9611, 0.9612, 0.9659, 0.9611, 0.9617,
        0.9611, 0.9615, 0.9629, 0.9616, 0.9624, 0.9630, 0.9613, 0.9632, 0.9614,
        0.9641, 0.9615, 0.9614, 0.9613, 0.9611, 0.9641, 0.9630, 0.9615, 0.9619,
        0.9618, 0.9618, 0.9616, 0.9611, 0.9611, 0.9617, 0.9622, 0.9656, 0.9611,
        0.9616, 0.9614, 0.9631, 0.9790, 0.9617, 0.9615, 0.9618, 0.9623, 0.9623,
        0.9621, 0.9611, 0.9620, 0.9615, 0.9612, 0.9612, 0.9644, 0.9728, 0.9630,
        0.9616, 0.9610, 0.9625, 0.9616, 0.9643, 0.9647, 0.9630, 0.9756, 0.9613,
        0.9617], device='cuda:0', requires_grad=True)
Epoch: 007/100, Runtime 1.788066, Loss 1.004574, forward nfe 302, backward nfe 28, Train: 0.9563, Val: 0.7851, Test: 0.8037, Best time: 1.5863
K_d =  Parameter containing:
tensor([0.9563, 0.9566, 0.9555, 0.9576, 0.9555, 0.9556, 0.9608, 0.9555, 0.9562,
        0.9556, 0.9565, 0.9574, 0.9566, 0.9569, 0.9578, 0.9557, 0.9580, 0.9559,
        0.9594, 0.9561, 0.9560, 0.9559, 0.9555, 0.9595, 0.9575, 0.9560, 0.9564,
        0.9563, 0.9564, 0.9561, 0.9556, 0.9556, 0.9564, 0.9569, 0.9609, 0.9554,
        0.9564, 0.9563, 0.9578, 0.9747, 0.9564, 0.9559, 0.9566, 0.9569, 0.9571,
        0.9568, 0.9555, 0.9566, 0.9560, 0.9556, 0.9555, 0.9591, 0.9688, 0.9576,
        0.9560, 0.9554, 0.9572, 0.9562, 0.9590, 0.9598, 0.9577, 0.9736, 0.9557,
        0.9565], device='cuda:0', requires_grad=True)
Epoch: 008/100, Runtime 1.653129, Loss 0.906643, forward nfe 354, backward nfe 32, Train: 0.9563, Val: 0.7851, Test: 0.8037, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9510, 0.9512, 0.9500, 0.9520, 0.9499, 0.9501, 0.9555, 0.9500, 0.9508,
        0.9500, 0.9518, 0.9518, 0.9515, 0.9514, 0.9524, 0.9500, 0.9527, 0.9505,
        0.9546, 0.9506, 0.9506, 0.9506, 0.9500, 0.9552, 0.9519, 0.9506, 0.9510,
        0.9507, 0.9510, 0.9507, 0.9502, 0.9501, 0.9512, 0.9516, 0.9562, 0.9498,
        0.9511, 0.9511, 0.9524, 0.9702, 0.9513, 0.9502, 0.9515, 0.9514, 0.9517,
        0.9514, 0.9499, 0.9511, 0.9506, 0.9501, 0.9499, 0.9540, 0.9645, 0.9521,
        0.9504, 0.9498, 0.9518, 0.9507, 0.9535, 0.9549, 0.9525, 0.9712, 0.9500,
        0.9511], device='cuda:0', requires_grad=True)
Epoch: 009/100, Runtime 1.595579, Loss 0.786159, forward nfe 400, backward nfe 36, Train: 0.9563, Val: 0.7851, Test: 0.8037, Best time: 1.0000
K_d =  Parameter containing:
tensor([0.9458, 0.9458, 0.9446, 0.9464, 0.9445, 0.9445, 0.9502, 0.9446, 0.9454,
        0.9445, 0.9469, 0.9463, 0.9462, 0.9460, 0.9470, 0.9445, 0.9473, 0.9452,
        0.9498, 0.9452, 0.9452, 0.9454, 0.9446, 0.9509, 0.9465, 0.9452, 0.9455,
        0.9451, 0.9456, 0.9452, 0.9449, 0.9446, 0.9459, 0.9462, 0.9513, 0.9442,
        0.9458, 0.9459, 0.9468, 0.9654, 0.9464, 0.9445, 0.9466, 0.9459, 0.9463,
        0.9461, 0.9444, 0.9456, 0.9452, 0.9446, 0.9444, 0.9490, 0.9599, 0.9465,
        0.9449, 0.9441, 0.9464, 0.9452, 0.9480, 0.9499, 0.9473, 0.9694, 0.9443,
        0.9457], device='cuda:0', requires_grad=True)
Epoch: 010/100, Runtime 1.720742, Loss 0.722302, forward nfe 446, backward nfe 40, Train: 0.9563, Val: 0.7851, Test: 0.8037, Best time: 1.0000
Traceback (most recent call last):
  File "run_GNN.py", line 259, in main
    loss = train(model, optimizer, data, pos_encoding)
  File "run_GNN.py", line 70, in train
    out = model(feat, pos_encoding)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/GNN_early.py", line 84, in forward
    z = self.odeblock(x)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/block_constant.py", line 45, in forward
    state_dt = integrator(
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/adjoint.py", line 192, in odeint_adjoint
    shapes, func, y0, t, rtol, atol, method, options, event_fn, decreasing_time = _check_inputs(func, y0, t, rtol, atol, method, options, event_fn, SOLVERS)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py", line 301, in _check_inputs
    func = _PerturbFunc(func)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py", line 171, in __init__
    super(_PerturbFunc, self).__init__()
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 258, in __init__
    torch._C._log_api_usage_once("python.nn_module")
KeyboardInterrupt
best val accuracy 0.785075 with test accuracy 0.803741 at epoch 7 and best time 1.000000