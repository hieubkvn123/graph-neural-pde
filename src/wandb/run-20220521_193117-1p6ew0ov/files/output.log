****************** Extended Laplacian Function V.3 ******************
K =  None
Alpha =  1.0
*********************************************************************
****************** Extended Laplacian Function V.3 ******************
K =  None
Alpha =  1.0
*********************************************************************
GNNEarly
m1.module.weight
torch.Size([80, 1433])
m1.module.bias
torch.Size([80])
m2.module.weight
torch.Size([7, 80])
m2.module.bias
torch.Size([7])
odeblock.odefunc.alpha_train
torch.Size([])
odeblock.odefunc.beta_train
torch.Size([])
odeblock.odefunc.alpha_sc
torch.Size([1])
odeblock.odefunc.beta_sc
torch.Size([1])
odeblock.odefunc.w
torch.Size([80, 80])
odeblock.odefunc.d
torch.Size([80])
odeblock.odefunc.k_d
torch.Size([80])
odeblock.reg_odefunc.odefunc.alpha_train
torch.Size([])
odeblock.reg_odefunc.odefunc.beta_train
torch.Size([])
odeblock.reg_odefunc.odefunc.alpha_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.beta_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.w
torch.Size([80, 80])
odeblock.reg_odefunc.odefunc.d
torch.Size([80])
odeblock.reg_odefunc.odefunc.k_d
torch.Size([80])
odeblock.multihead_att_layer.Q.weight
torch.Size([128, 80])
odeblock.multihead_att_layer.Q.bias
torch.Size([128])
odeblock.multihead_att_layer.V.weight
torch.Size([128, 80])
odeblock.multihead_att_layer.V.bias
torch.Size([128])
odeblock.multihead_att_layer.K.weight
torch.Size([128, 80])
odeblock.multihead_att_layer.K.bias
torch.Size([128])
odeblock.multihead_att_layer.Wout.weight
torch.Size([80, 16])
odeblock.multihead_att_layer.Wout.bias
torch.Size([80])
/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py:11: UserWarning: Dopri5Solver: Unexpected arguments {'step_size': 1}
  warnings.warn('{}: Unexpected arguments {}'.format(solver.__class__.__name__, unused_kwargs))
/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/misc.py:11: UserWarning: EarlyStopDopri5: Unexpected arguments {'step_size': 1}
  warnings.warn('{}: Unexpected arguments {}'.format(solver.__class__.__name__, unused_kwargs))
K_d =  Parameter containing:
tensor([0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771,
        0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771, 0.9771],
       device='cuda:0', requires_grad=True)
Epoch: 001/100, Runtime 2.207581, Loss 1.947096, forward nfe 74, backward nfe 0, Train: 0.6500, Val: 0.5441, Test: 0.5543, Best time: 1.0441
K_d =  Parameter containing:
tensor([0.9543, 0.9542, 0.9543, 0.9550, 0.9543, 0.9544, 0.9542, 0.9549, 0.9542,
        0.9544, 0.9554, 0.9548, 0.9545, 0.9544, 0.9544, 0.9543, 0.9546, 0.9545,
        0.9543, 0.9542, 0.9542, 0.9544, 0.9543, 0.9544, 0.9544, 0.9545, 0.9543,
        0.9543, 0.9541, 0.9547, 0.9544, 0.9543, 0.9542, 0.9542, 0.9543, 0.9543,
        0.9552, 0.9548, 0.9542, 0.9544, 0.9542, 0.9546, 0.9543, 0.9547, 0.9542,
        0.9542, 0.9543, 0.9543, 0.9544, 0.9543, 0.9543, 0.9543, 0.9547, 0.9542,
        0.9542, 0.9543, 0.9543, 0.9544, 0.9544, 0.9542, 0.9543, 0.9544, 0.9543,
        0.9542, 0.9543, 0.9550, 0.9552, 0.9542, 0.9551, 0.9544, 0.9543, 0.9542,
        0.9543, 0.9543, 0.9544, 0.9543, 0.9545, 0.9544, 0.9543, 0.9543],
       device='cuda:0', requires_grad=True)
Epoch: 002/100, Runtime 2.270538, Loss 1.943045, forward nfe 348, backward nfe 0, Train: 0.6429, Val: 0.6412, Test: 0.6701, Best time: 5.3524
K_d =  Parameter containing:
tensor([0.9318, 0.9315, 0.9317, 0.9341, 0.9332, 0.9320, 0.9316, 0.9336, 0.9315,
        0.9319, 0.9354, 0.9341, 0.9322, 0.9320, 0.9320, 0.9318, 0.9325, 0.9321,
        0.9316, 0.9315, 0.9314, 0.9323, 0.9318, 0.9319, 0.9320, 0.9337, 0.9317,
        0.9315, 0.9319, 0.9343, 0.9319, 0.9318, 0.9320, 0.9313, 0.9315, 0.9318,
        0.9352, 0.9342, 0.9316, 0.9319, 0.9313, 0.9331, 0.9319, 0.9340, 0.9315,
        0.9325, 0.9319, 0.9318, 0.9317, 0.9329, 0.9319, 0.9325, 0.9336, 0.9318,
        0.9316, 0.9317, 0.9320, 0.9317, 0.9317, 0.9317, 0.9324, 0.9319, 0.9317,
        0.9324, 0.9318, 0.9330, 0.9345, 0.9315, 0.9349, 0.9319, 0.9317, 0.9314,
        0.9317, 0.9318, 0.9319, 0.9315, 0.9321, 0.9319, 0.9319, 0.9317],
       device='cuda:0', requires_grad=True)
Epoch: 003/100, Runtime 2.121148, Loss 1.881949, forward nfe 616, backward nfe 0, Train: 0.7286, Val: 0.7500, Test: 0.7777, Best time: 7.4159
K_d =  Parameter containing:
tensor([0.9096, 0.9089, 0.9100, 0.9144, 0.9146, 0.9098, 0.9091, 0.9148, 0.9090,
        0.9098, 0.9174, 0.9151, 0.9099, 0.9098, 0.9099, 0.9101, 0.9122, 0.9100,
        0.9095, 0.9090, 0.9089, 0.9114, 0.9096, 0.9093, 0.9099, 0.9141, 0.9094,
        0.9092, 0.9105, 0.9166, 0.9096, 0.9095, 0.9108, 0.9084, 0.9097, 0.9096,
        0.9161, 0.9153, 0.9105, 0.9097, 0.9088, 0.9124, 0.9096, 0.9144, 0.9090,
        0.9127, 0.9107, 0.9096, 0.9100, 0.9129, 0.9096, 0.9119, 0.9139, 0.9100,
        0.9092, 0.9095, 0.9132, 0.9092, 0.9098, 0.9094, 0.9122, 0.9097, 0.9090,
        0.9121, 0.9091, 0.9129, 0.9170, 0.9100, 0.9166, 0.9097, 0.9093, 0.9091,
        0.9092, 0.9096, 0.9098, 0.9096, 0.9104, 0.9108, 0.9098, 0.9094],
       device='cuda:0', requires_grad=True)
Epoch: 004/100, Runtime 2.110497, Loss 1.739879, forward nfe 872, backward nfe 0, Train: 0.7786, Val: 0.7897, Test: 0.7929, Best time: 7.5100
K_d =  Parameter containing:
tensor([0.8876, 0.8868, 0.8887, 0.8956, 0.8962, 0.8876, 0.8870, 0.8971, 0.8867,
        0.8879, 0.8997, 0.8970, 0.8879, 0.8878, 0.8881, 0.8897, 0.8929, 0.8882,
        0.8886, 0.8864, 0.8867, 0.8906, 0.8877, 0.8873, 0.8880, 0.8951, 0.8873,
        0.8881, 0.8896, 0.9006, 0.8874, 0.8875, 0.8907, 0.8862, 0.8900, 0.8875,
        0.8982, 0.8981, 0.8909, 0.8878, 0.8877, 0.8935, 0.8877, 0.8941, 0.8867,
        0.8944, 0.8913, 0.8876, 0.8886, 0.8950, 0.8877, 0.8942, 0.8953, 0.8889,
        0.8870, 0.8874, 0.8946, 0.8874, 0.8896, 0.8872, 0.8935, 0.8878, 0.8867,
        0.8929, 0.8865, 0.8948, 0.9000, 0.8895, 0.8993, 0.8877, 0.8872, 0.8878,
        0.8876, 0.8876, 0.8879, 0.8894, 0.8898, 0.8914, 0.8878, 0.8873],
       device='cuda:0', requires_grad=True)
Epoch: 005/100, Runtime 2.030905, Loss 1.545411, forward nfe 1128, backward nfe 0, Train: 0.8000, Val: 0.8051, Test: 0.7909, Best time: 7.5934
K_d =  Parameter containing:
tensor([0.8659, 0.8680, 0.8671, 0.8771, 0.8784, 0.8654, 0.8651, 0.8794, 0.8648,
        0.8663, 0.8810, 0.8785, 0.8658, 0.8660, 0.8665, 0.8702, 0.8754, 0.8666,
        0.8693, 0.8638, 0.8647, 0.8706, 0.8660, 0.8661, 0.8664, 0.8771, 0.8656,
        0.8691, 0.8692, 0.8853, 0.8652, 0.8656, 0.8703, 0.8640, 0.8713, 0.8658,
        0.8810, 0.8796, 0.8716, 0.8661, 0.8674, 0.8742, 0.8660, 0.8747, 0.8648,
        0.8771, 0.8732, 0.8658, 0.8687, 0.8774, 0.8660, 0.8773, 0.8775, 0.8681,
        0.8652, 0.8657, 0.8764, 0.8659, 0.8690, 0.8651, 0.8757, 0.8662, 0.8657,
        0.8749, 0.8651, 0.8773, 0.8822, 0.8694, 0.8843, 0.8661, 0.8652, 0.8670,
        0.8658, 0.8659, 0.8663, 0.8707, 0.8695, 0.8729, 0.8662, 0.8655],
       device='cuda:0', requires_grad=True)
Epoch: 006/100, Runtime 2.065602, Loss 1.299042, forward nfe 1384, backward nfe 0, Train: 0.8429, Val: 0.8103, Test: 0.8030, Best time: 13.3916
K_d =  Parameter containing:
tensor([0.8445, 0.8489, 0.8453, 0.8584, 0.8605, 0.8430, 0.8436, 0.8611, 0.8431,
        0.8450, 0.8623, 0.8600, 0.8437, 0.8443, 0.8453, 0.8515, 0.8582, 0.8454,
        0.8512, 0.8425, 0.8431, 0.8509, 0.8447, 0.8461, 0.8451, 0.8584, 0.8441,
        0.8506, 0.8484, 0.8687, 0.8440, 0.8437, 0.8498, 0.8416, 0.8532, 0.8442,
        0.8637, 0.8619, 0.8519, 0.8448, 0.8471, 0.8544, 0.8447, 0.8569, 0.8431,
        0.8604, 0.8552, 0.8444, 0.8482, 0.8589, 0.8446, 0.8601, 0.8605, 0.8469,
        0.8436, 0.8442, 0.8574, 0.8443, 0.8493, 0.8449, 0.8570, 0.8448, 0.8447,
        0.8577, 0.8441, 0.8588, 0.8650, 0.8490, 0.8690, 0.8447, 0.8433, 0.8464,
        0.8443, 0.8445, 0.8449, 0.8529, 0.8489, 0.8551, 0.8449, 0.8440],
       device='cuda:0', requires_grad=True)
Epoch: 007/100, Runtime 2.064998, Loss 1.044012, forward nfe 1634, backward nfe 0, Train: 0.8429, Val: 0.8103, Test: 0.8030, Best time: 32.0000
K_d =  Parameter containing:
tensor([0.8234, 0.8298, 0.8235, 0.8395, 0.8422, 0.8207, 0.8223, 0.8429, 0.8217,
        0.8240, 0.8433, 0.8408, 0.8218, 0.8224, 0.8243, 0.8324, 0.8403, 0.8244,
        0.8323, 0.8216, 0.8217, 0.8314, 0.8236, 0.8255, 0.8241, 0.8395, 0.8229,
        0.8313, 0.8272, 0.8512, 0.8236, 0.8234, 0.8291, 0.8192, 0.8348, 0.8229,
        0.8458, 0.8438, 0.8318, 0.8237, 0.8265, 0.8340, 0.8236, 0.8382, 0.8217,
        0.8427, 0.8366, 0.8233, 0.8272, 0.8399, 0.8236, 0.8420, 0.8426, 0.8262,
        0.8224, 0.8231, 0.8387, 0.8225, 0.8293, 0.8252, 0.8378, 0.8237, 0.8234,
        0.8396, 0.8230, 0.8400, 0.8472, 0.8287, 0.8528, 0.8236, 0.8213, 0.8255,
        0.8229, 0.8233, 0.8239, 0.8343, 0.8280, 0.8375, 0.8239, 0.8228],
       device='cuda:0', requires_grad=True)
Epoch: 008/100, Runtime 2.039846, Loss 0.817978, forward nfe 1884, backward nfe 0, Train: 0.8429, Val: 0.8103, Test: 0.8030, Best time: 32.0000
K_d =  Parameter containing:
tensor([0.8026, 0.8113, 0.8017, 0.8202, 0.8233, 0.7984, 0.8013, 0.8246, 0.8006,
        0.8033, 0.8251, 0.8210, 0.7996, 0.8005, 0.8036, 0.8135, 0.8221, 0.8037,
        0.8130, 0.8005, 0.8006, 0.8119, 0.8029, 0.8046, 0.8034, 0.8207, 0.8020,
        0.8117, 0.8066, 0.8334, 0.8027, 0.8027, 0.8085, 0.7970, 0.8157, 0.8016,
        0.8274, 0.8254, 0.8116, 0.8029, 0.8057, 0.8136, 0.8028, 0.8189, 0.8006,
        0.8244, 0.8173, 0.8024, 0.8061, 0.8207, 0.8028, 0.8235, 0.8245, 0.8057,
        0.8014, 0.8022, 0.8202, 0.8007, 0.8090, 0.8055, 0.8185, 0.8030, 0.8020,
        0.8216, 0.8018, 0.8210, 0.8287, 0.8082, 0.8359, 0.8029, 0.7994, 0.8044,
        0.8018, 0.8025, 0.8032, 0.8150, 0.8072, 0.8195, 0.8032, 0.8019],
       device='cuda:0', requires_grad=True)
Epoch: 009/100, Runtime 1.963492, Loss 0.647144, forward nfe 2128, backward nfe 0, Train: 0.8429, Val: 0.8103, Test: 0.8030, Best time: 32.0000
K_d =  Parameter containing:
tensor([0.7821, 0.7929, 0.7801, 0.8013, 0.8043, 0.7762, 0.7806, 0.8072, 0.7798,
        0.7829, 0.8084, 0.8011, 0.7782, 0.7785, 0.7833, 0.7945, 0.8043, 0.7834,
        0.7934, 0.7794, 0.7799, 0.7920, 0.7825, 0.7836, 0.7830, 0.8022, 0.7814,
        0.7917, 0.7863, 0.8157, 0.7818, 0.7823, 0.7884, 0.7753, 0.7985, 0.7805,
        0.8093, 0.8075, 0.7913, 0.7825, 0.7846, 0.7934, 0.7823, 0.8000, 0.7798,
        0.8062, 0.7981, 0.7819, 0.7850, 0.8011, 0.7822, 0.8044, 0.8062, 0.7850,
        0.7807, 0.7817, 0.8020, 0.7796, 0.7888, 0.7874, 0.7992, 0.7825, 0.7807,
        0.8031, 0.7806, 0.8023, 0.8097, 0.7875, 0.8187, 0.7824, 0.7775, 0.7835,
        0.7810, 0.7820, 0.7827, 0.7955, 0.7871, 0.8009, 0.7828, 0.7813],
       device='cuda:0', requires_grad=True)
Epoch: 010/100, Runtime 1.870318, Loss 0.574309, forward nfe 2354, backward nfe 0, Train: 0.8857, Val: 0.8235, Test: 0.8132, Best time: 15.0397
K_d =  Parameter containing:
tensor([0.7620, 0.7758, 0.7585, 0.7827, 0.7854, 0.7540, 0.7603, 0.7906, 0.7593,
        0.7627, 0.7933, 0.7815, 0.7565, 0.7567, 0.7632, 0.7756, 0.7862, 0.7633,
        0.7736, 0.7580, 0.7594, 0.7742, 0.7623, 0.7626, 0.7628, 0.7843, 0.7612,
        0.7717, 0.7663, 0.7977, 0.7607, 0.7616, 0.7687, 0.7538, 0.7812, 0.7595,
        0.7921, 0.7900, 0.7707, 0.7624, 0.7636, 0.7730, 0.7622, 0.7813, 0.7594,
        0.7875, 0.7783, 0.7617, 0.7648, 0.7823, 0.7619, 0.7848, 0.7882, 0.7652,
        0.7604, 0.7614, 0.7843, 0.7591, 0.7689, 0.7690, 0.7802, 0.7623, 0.7598,
        0.7846, 0.7594, 0.7841, 0.7919, 0.7669, 0.8011, 0.7623, 0.7558, 0.7632,
        0.7609, 0.7618, 0.7625, 0.7761, 0.7677, 0.7826, 0.7628, 0.7610],
       device='cuda:0', requires_grad=True)
Epoch: 011/100, Runtime 1.789767, Loss 0.536924, forward nfe 2574, backward nfe 0, Train: 0.8857, Val: 0.8235, Test: 0.8132, Best time: 32.0000
K_d =  Parameter containing:
tensor([0.7421, 0.7588, 0.7370, 0.7640, 0.7678, 0.7322, 0.7403, 0.7746, 0.7392,
        0.7427, 0.7799, 0.7628, 0.7353, 0.7351, 0.7435, 0.7564, 0.7678, 0.7436,
        0.7542, 0.7365, 0.7393, 0.7563, 0.7425, 0.7417, 0.7430, 0.7675, 0.7412,
        0.7518, 0.7465, 0.7802, 0.7396, 0.7412, 0.7500, 0.7326, 0.7639, 0.7388,
        0.7759, 0.7726, 0.7509, 0.7425, 0.7428, 0.7529, 0.7423, 0.7626, 0.7392,
        0.7684, 0.7589, 0.7418, 0.7448, 0.7647, 0.7416, 0.7662, 0.7704, 0.7460,
        0.7404, 0.7415, 0.7675, 0.7390, 0.7493, 0.7503, 0.7614, 0.7424, 0.7397,
        0.7665, 0.7384, 0.7666, 0.7747, 0.7467, 0.7832, 0.7425, 0.7344, 0.7430,
        0.7411, 0.7420, 0.7426, 0.7563, 0.7492, 0.7642, 0.7430, 0.7410],
       device='cuda:0', requires_grad=True)
Epoch: 012/100, Runtime 1.852378, Loss 0.434697, forward nfe 2788, backward nfe 0, Train: 0.8643, Val: 0.8294, Test: 0.7959, Best time: 21.9097
K_d =  Parameter containing:
tensor([0.7226, 0.7415, 0.7161, 0.7477, 0.7499, 0.7109, 0.7206, 0.7594, 0.7193,
        0.7229, 0.7683, 0.7448, 0.7164, 0.7136, 0.7241, 0.7378, 0.7494, 0.7241,
        0.7353, 0.7151, 0.7196, 0.7390, 0.7230, 0.7209, 0.7235, 0.7521, 0.7216,
        0.7322, 0.7278, 0.7627, 0.7185, 0.7206, 0.7325, 0.7129, 0.7467, 0.7182,
        0.7608, 0.7562, 0.7319, 0.7230, 0.7220, 0.7338, 0.7228, 0.7437, 0.7194,
        0.7501, 0.7393, 0.7223, 0.7255, 0.7481, 0.7213, 0.7477, 0.7526, 0.7275,
        0.7207, 0.7219, 0.7500, 0.7189, 0.7295, 0.7316, 0.7428, 0.7227, 0.7201,
        0.7481, 0.7174, 0.7489, 0.7583, 0.7276, 0.7655, 0.7230, 0.7128, 0.7229,
        0.7215, 0.7224, 0.7229, 0.7363, 0.7319, 0.7456, 0.7236, 0.7214],
       device='cuda:0', requires_grad=True)
Epoch: 013/100, Runtime 1.856617, Loss 0.408909, forward nfe 3008, backward nfe 0, Train: 0.9000, Val: 0.8434, Test: 0.8162, Best time: 23.1506
K_d =  Parameter containing:
tensor([0.7034, 0.7237, 0.6952, 0.7330, 0.7329, 0.6897, 0.7012, 0.7443, 0.6998,
        0.7033, 0.7585, 0.7283, 0.6976, 0.6923, 0.7050, 0.7198, 0.7313, 0.7050,
        0.7166, 0.6940, 0.7001, 0.7217, 0.7039, 0.7012, 0.7043, 0.7367, 0.7023,
        0.7129, 0.7105, 0.7450, 0.6973, 0.6997, 0.7158, 0.6939, 0.7300, 0.6977,
        0.7470, 0.7407, 0.7135, 0.7039, 0.7016, 0.7147, 0.7036, 0.7247, 0.7000,
        0.7312, 0.7194, 0.7030, 0.7063, 0.7321, 0.7011, 0.7293, 0.7352, 0.7105,
        0.7014, 0.7027, 0.7329, 0.6995, 0.7110, 0.7126, 0.7250, 0.7032, 0.7003,
        0.7295, 0.6964, 0.7317, 0.7434, 0.7092, 0.7479, 0.7038, 0.6913, 0.7041,
        0.7018, 0.7032, 0.7034, 0.7174, 0.7154, 0.7269, 0.7045, 0.7021],
       device='cuda:0', requires_grad=True)
Epoch: 014/100, Runtime 1.784721, Loss 0.389471, forward nfe 3234, backward nfe 0, Train: 0.9000, Val: 0.8434, Test: 0.8162, Best time: 32.0000
Traceback (most recent call last):
  File "run_GNN.py", line 265, in main
    tmp_train_acc, tmp_val_acc, tmp_test_acc = this_test(model, data, pos_encoding, opt)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "run_GNN.py", line 140, in test
    logits, accs = model(feat, pos_encoding), []
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/GNN_early.py", line 84, in forward
    z = self.odeblock(x)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/media/data-share/hieunm60/graph-neural-pde/src/block_transformer_attention.py", line 61, in forward
    state_dt = integrator(
  File "/media/data-share/hieunm60/graph-neural-pde/src/early_stop_solver.py", line 301, in __call__
    t, solution = self.solver.integrate(t)
  File "/media/data-share/hieunm60/graph-neural-pde/src/early_stop_solver.py", line 65, in integrate
    new_t, y = self.advance(t[i])
  File "/media/data-share/hieunm60/graph-neural-pde/src/early_stop_solver.py", line 77, in advance
    self.rk_state = self._adaptive_step(self.rk_state)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/rk_common.py", line 255, in _adaptive_step
    y1, f1, y1_error, k = _runge_kutta_step(self.func, y0, f0, t0, dt, t1, tableau=self.tableau)
  File "/home/hieunm60/anaconda3/envs/deepgrand/lib/python3.8/site-packages/torchdiffeq/_impl/rk_common.py", line 68, in _runge_kutta_step
    if alpha_i == 1.:
KeyboardInterrupt
best val accuracy 0.843382 with test accuracy 0.816244 at epoch 13 and best time 32.000000